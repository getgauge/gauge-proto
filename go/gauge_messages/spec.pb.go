//----------------------------------------------------------------
//  Copyright (c) ThoughtWorks, Inc.
//  Licensed under the Apache License, Version 2.0
//  See LICENSE in the project root for license information.
//----------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: spec.proto

package gauge_messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// / Execution Status
type ExecutionStatus int32

const (
	ExecutionStatus_NOTEXECUTED ExecutionStatus = 0
	ExecutionStatus_PASSED      ExecutionStatus = 1
	ExecutionStatus_FAILED      ExecutionStatus = 2
	ExecutionStatus_SKIPPED     ExecutionStatus = 3
)

// Enum value maps for ExecutionStatus.
var (
	ExecutionStatus_name = map[int32]string{
		0: "NOTEXECUTED",
		1: "PASSED",
		2: "FAILED",
		3: "SKIPPED",
	}
	ExecutionStatus_value = map[string]int32{
		"NOTEXECUTED": 0,
		"PASSED":      1,
		"FAILED":      2,
		"SKIPPED":     3,
	}
)

func (x ExecutionStatus) Enum() *ExecutionStatus {
	p := new(ExecutionStatus)
	*p = x
	return p
}

func (x ExecutionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[0].Descriptor()
}

func (ExecutionStatus) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[0]
}

func (x ExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionStatus.Descriptor instead.
func (ExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{0}
}

// / Enumerates various item types that the proto item can contain. Valid types are: Step, Comment, Concept, Scenario, TableDrivenScenario, Table, Tags
type ProtoItem_ItemType int32

const (
	ProtoItem_Step                ProtoItem_ItemType = 0 // Item is a Step
	ProtoItem_Comment             ProtoItem_ItemType = 1 // Item is a Comment
	ProtoItem_Concept             ProtoItem_ItemType = 2 // Item is a Concept
	ProtoItem_Scenario            ProtoItem_ItemType = 3 // Item is a Scenario
	ProtoItem_TableDrivenScenario ProtoItem_ItemType = 4 // Item is a TableDrivenScenario, a special case of Scenario, where there is a Context Step defining a table.
	ProtoItem_Table               ProtoItem_ItemType = 5 // Item is a Table
	ProtoItem_Tags                ProtoItem_ItemType = 6 // Item is a Tag
)

// Enum value maps for ProtoItem_ItemType.
var (
	ProtoItem_ItemType_name = map[int32]string{
		0: "Step",
		1: "Comment",
		2: "Concept",
		3: "Scenario",
		4: "TableDrivenScenario",
		5: "Table",
		6: "Tags",
	}
	ProtoItem_ItemType_value = map[string]int32{
		"Step":                0,
		"Comment":             1,
		"Concept":             2,
		"Scenario":            3,
		"TableDrivenScenario": 4,
		"Table":               5,
		"Tags":                6,
	}
)

func (x ProtoItem_ItemType) Enum() *ProtoItem_ItemType {
	p := new(ProtoItem_ItemType)
	*p = x
	return p
}

func (x ProtoItem_ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoItem_ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[1].Descriptor()
}

func (ProtoItem_ItemType) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[1]
}

func (x ProtoItem_ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoItem_ItemType.Descriptor instead.
func (ProtoItem_ItemType) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{1, 0}
}

// / Enum representing the types of Fragment
type Fragment_FragmentType int32

const (
	Fragment_Text      Fragment_FragmentType = 0 /// Fragment is a Text part
	Fragment_Parameter Fragment_FragmentType = 1 /// Fragment is a Parameter part
)

// Enum value maps for Fragment_FragmentType.
var (
	Fragment_FragmentType_name = map[int32]string{
		0: "Text",
		1: "Parameter",
	}
	Fragment_FragmentType_value = map[string]int32{
		"Text":      0,
		"Parameter": 1,
	}
)

func (x Fragment_FragmentType) Enum() *Fragment_FragmentType {
	p := new(Fragment_FragmentType)
	*p = x
	return p
}

func (x Fragment_FragmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fragment_FragmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[2].Descriptor()
}

func (Fragment_FragmentType) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[2]
}

func (x Fragment_FragmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fragment_FragmentType.Descriptor instead.
func (Fragment_FragmentType) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{8, 0}
}

// / Enum representing types of Parameter.
type Parameter_ParameterType int32

const (
	Parameter_Static         Parameter_ParameterType = 0 // Static parameter. The value of the parameter is defined at the Step.
	Parameter_Dynamic        Parameter_ParameterType = 1 // Dynamic parameter. This is a parameter placeholder, and the actual value is injected at runtime, depending on the context of the call.
	Parameter_Special_String Parameter_ParameterType = 2 // Special paramter, taking a string value. Special paramters are read from a file.
	Parameter_Special_Table  Parameter_ParameterType = 3 // Special paramter, taking a Table value. This parameter is read from a csv file.
	Parameter_Table          Parameter_ParameterType = 4 // A table parameter, used for data driven execution.
)

// Enum value maps for Parameter_ParameterType.
var (
	Parameter_ParameterType_name = map[int32]string{
		0: "Static",
		1: "Dynamic",
		2: "Special_String",
		3: "Special_Table",
		4: "Table",
	}
	Parameter_ParameterType_value = map[string]int32{
		"Static":         0,
		"Dynamic":        1,
		"Special_String": 2,
		"Special_Table":  3,
		"Table":          4,
	}
)

func (x Parameter_ParameterType) Enum() *Parameter_ParameterType {
	p := new(Parameter_ParameterType)
	*p = x
	return p
}

func (x Parameter_ParameterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Parameter_ParameterType) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[3].Descriptor()
}

func (Parameter_ParameterType) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[3]
}

func (x Parameter_ParameterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Parameter_ParameterType.Descriptor instead.
func (Parameter_ParameterType) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{9, 0}
}

type ProtoExecutionResult_ErrorType int32

const (
	ProtoExecutionResult_ASSERTION    ProtoExecutionResult_ErrorType = 0
	ProtoExecutionResult_VERIFICATION ProtoExecutionResult_ErrorType = 1
)

// Enum value maps for ProtoExecutionResult_ErrorType.
var (
	ProtoExecutionResult_ErrorType_name = map[int32]string{
		0: "ASSERTION",
		1: "VERIFICATION",
	}
	ProtoExecutionResult_ErrorType_value = map[string]int32{
		"ASSERTION":    0,
		"VERIFICATION": 1,
	}
)

func (x ProtoExecutionResult_ErrorType) Enum() *ProtoExecutionResult_ErrorType {
	p := new(ProtoExecutionResult_ErrorType)
	*p = x
	return p
}

func (x ProtoExecutionResult_ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoExecutionResult_ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[4].Descriptor()
}

func (ProtoExecutionResult_ErrorType) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[4]
}

func (x ProtoExecutionResult_ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoExecutionResult_ErrorType.Descriptor instead.
func (ProtoExecutionResult_ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{14, 0}
}

type Error_ErrorType int32

const (
	Error_PARSE_ERROR      Error_ErrorType = 0
	Error_VALIDATION_ERROR Error_ErrorType = 1
)

// Enum value maps for Error_ErrorType.
var (
	Error_ErrorType_name = map[int32]string{
		0: "PARSE_ERROR",
		1: "VALIDATION_ERROR",
	}
	Error_ErrorType_value = map[string]int32{
		"PARSE_ERROR":      0,
		"VALIDATION_ERROR": 1,
	}
)

func (x Error_ErrorType) Enum() *Error_ErrorType {
	p := new(Error_ErrorType)
	*p = x
	return p
}

func (x Error_ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error_ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_spec_proto_enumTypes[5].Descriptor()
}

func (Error_ErrorType) Type() protoreflect.EnumType {
	return &file_spec_proto_enumTypes[5]
}

func (x Error_ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error_ErrorType.Descriptor instead.
func (Error_ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{20, 0}
}

// / A proto object representing a Specification
// / A specification can contain Scenarios or Steps, besides Comments
type ProtoSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Heading describing the Specification
	SpecHeading string `protobuf:"bytes,1,opt,name=specHeading,proto3" json:"specHeading,omitempty"`
	// / A collection of items that come under this step
	Items []*ProtoItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	// / Flag indicating if this is a Table Driven Specification. The table is defined in the context, this is different from using a table parameter.
	IsTableDriven bool `protobuf:"varint,3,opt,name=isTableDriven,proto3" json:"isTableDriven,omitempty"`
	// / Contains a 'before' hook failure message. This happens when the `before_spec` hook has an error.
	PreHookFailures []*ProtoHookFailure `protobuf:"bytes,4,rep,name=preHookFailures,proto3" json:"preHookFailures,omitempty"`
	// / Contains a 'before' hook failure message. This happens when the `after_hook` hook has an error.
	PostHookFailures []*ProtoHookFailure `protobuf:"bytes,5,rep,name=postHookFailures,proto3" json:"postHookFailures,omitempty"`
	// / Contains the filename for that holds this specification.
	FileName string `protobuf:"bytes,6,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// / Contains a list of tags that are defined at the specification level. Scenario tags are not present here.
	Tags []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	// / Additional information at pre hook exec time to be available on reports
	PreHookMessages []string `protobuf:"bytes,8,rep,name=preHookMessages,proto3" json:"preHookMessages,omitempty"`
	// / Additional information at post hook exec time to be available on reports
	PostHookMessages []string `protobuf:"bytes,9,rep,name=postHookMessages,proto3" json:"postHookMessages,omitempty"`
	// / [DEPRECATED, use preHookMessages] Additional information at pre hook exec time to be available on reports
	//
	// Deprecated: Marked as deprecated in spec.proto.
	PreHookMessage []string `protobuf:"bytes,10,rep,name=preHookMessage,proto3" json:"preHookMessage,omitempty"`
	// / [DEPRECATED, use postHookMessages] Additional information at post hook exec time to be available on reports
	//
	// Deprecated: Marked as deprecated in spec.proto.
	PostHookMessage []string `protobuf:"bytes,11,rep,name=postHookMessage,proto3" json:"postHookMessage,omitempty"`
	// / [DEPRECATED, use preHookScreenshotFiles] Capture Screenshot at pre hook exec time to be available on reports
	//
	// Deprecated: Marked as deprecated in spec.proto.
	PreHookScreenshots [][]byte `protobuf:"bytes,12,rep,name=preHookScreenshots,proto3" json:"preHookScreenshots,omitempty"`
	// / [DEPRECATED, use postHookScreenshotFiles] Capture Screenshot at post hook exec time to be available on reports
	//
	// Deprecated: Marked as deprecated in spec.proto.
	PostHookScreenshots [][]byte `protobuf:"bytes,13,rep,name=postHookScreenshots,proto3" json:"postHookScreenshots,omitempty"`
	// / meta field to indicate the number of items in the list
	// / used when items are sent as individual chunk
	ItemCount int64 `protobuf:"varint,14,opt,name=itemCount,proto3" json:"itemCount,omitempty"`
	// / Screenshots captured on pre hook exec time to be available on reports
	PreHookScreenshotFiles []string `protobuf:"bytes,15,rep,name=preHookScreenshotFiles,proto3" json:"preHookScreenshotFiles,omitempty"`
	// / Screenshots captured on post hook exec time to be available on reports
	PostHookScreenshotFiles []string `protobuf:"bytes,16,rep,name=postHookScreenshotFiles,proto3" json:"postHookScreenshotFiles,omitempty"`
}

func (x *ProtoSpec) Reset() {
	*x = ProtoSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSpec) ProtoMessage() {}

func (x *ProtoSpec) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSpec.ProtoReflect.Descriptor instead.
func (*ProtoSpec) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{0}
}

func (x *ProtoSpec) GetSpecHeading() string {
	if x != nil {
		return x.SpecHeading
	}
	return ""
}

func (x *ProtoSpec) GetItems() []*ProtoItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ProtoSpec) GetIsTableDriven() bool {
	if x != nil {
		return x.IsTableDriven
	}
	return false
}

func (x *ProtoSpec) GetPreHookFailures() []*ProtoHookFailure {
	if x != nil {
		return x.PreHookFailures
	}
	return nil
}

func (x *ProtoSpec) GetPostHookFailures() []*ProtoHookFailure {
	if x != nil {
		return x.PostHookFailures
	}
	return nil
}

func (x *ProtoSpec) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ProtoSpec) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProtoSpec) GetPreHookMessages() []string {
	if x != nil {
		return x.PreHookMessages
	}
	return nil
}

func (x *ProtoSpec) GetPostHookMessages() []string {
	if x != nil {
		return x.PostHookMessages
	}
	return nil
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoSpec) GetPreHookMessage() []string {
	if x != nil {
		return x.PreHookMessage
	}
	return nil
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoSpec) GetPostHookMessage() []string {
	if x != nil {
		return x.PostHookMessage
	}
	return nil
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoSpec) GetPreHookScreenshots() [][]byte {
	if x != nil {
		return x.PreHookScreenshots
	}
	return nil
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoSpec) GetPostHookScreenshots() [][]byte {
	if x != nil {
		return x.PostHookScreenshots
	}
	return nil
}

func (x *ProtoSpec) GetItemCount() int64 {
	if x != nil {
		return x.ItemCount
	}
	return 0
}

func (x *ProtoSpec) GetPreHookScreenshotFiles() []string {
	if x != nil {
		return x.PreHookScreenshotFiles
	}
	return nil
}

func (x *ProtoSpec) GetPostHookScreenshotFiles() []string {
	if x != nil {
		return x.PostHookScreenshotFiles
	}
	return nil
}

// / Container for all valid Items under a Specification.
type ProtoItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Itemtype of the current ProtoItem
	ItemType ProtoItem_ItemType `protobuf:"varint,1,opt,name=itemType,proto3,enum=gauge.messages.ProtoItem_ItemType" json:"itemType,omitempty"`
	// / Holds the Step definition. Valid only if ItemType = Step
	Step *ProtoStep `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
	// / Holds the Concept definition. Valid only if ItemType = Concept
	Concept *ProtoConcept `protobuf:"bytes,3,opt,name=concept,proto3" json:"concept,omitempty"`
	// / Holds the Scenario definition. Valid only if ItemType = Scenario
	Scenario *ProtoScenario `protobuf:"bytes,4,opt,name=scenario,proto3" json:"scenario,omitempty"`
	// / Holds the TableDrivenScenario definition. Valid only if ItemType = TableDrivenScenario
	TableDrivenScenario *ProtoTableDrivenScenario `protobuf:"bytes,5,opt,name=tableDrivenScenario,proto3" json:"tableDrivenScenario,omitempty"`
	// / Holds the Comment definition. Valid only if ItemType = Comment
	Comment *ProtoComment `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	// / Holds the Table definition. Valid only if ItemType = Table
	Table *ProtoTable `protobuf:"bytes,7,opt,name=table,proto3" json:"table,omitempty"`
	// / Holds the Tags definition. Valid only if ItemType = Tags
	Tags *ProtoTags `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
	// / Holds the Filename that the item belongs to
	FileName string `protobuf:"bytes,9,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *ProtoItem) Reset() {
	*x = ProtoItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoItem) ProtoMessage() {}

func (x *ProtoItem) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoItem.ProtoReflect.Descriptor instead.
func (*ProtoItem) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{1}
}

func (x *ProtoItem) GetItemType() ProtoItem_ItemType {
	if x != nil {
		return x.ItemType
	}
	return ProtoItem_Step
}

func (x *ProtoItem) GetStep() *ProtoStep {
	if x != nil {
		return x.Step
	}
	return nil
}

func (x *ProtoItem) GetConcept() *ProtoConcept {
	if x != nil {
		return x.Concept
	}
	return nil
}

func (x *ProtoItem) GetScenario() *ProtoScenario {
	if x != nil {
		return x.Scenario
	}
	return nil
}

func (x *ProtoItem) GetTableDrivenScenario() *ProtoTableDrivenScenario {
	if x != nil {
		return x.TableDrivenScenario
	}
	return nil
}

func (x *ProtoItem) GetComment() *ProtoComment {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *ProtoItem) GetTable() *ProtoTable {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *ProtoItem) GetTags() *ProtoTags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProtoItem) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// / A proto object representing a Scenario
type ProtoScenario struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Heading of the given Scenario
	ScenarioHeading string `protobuf:"bytes,1,opt,name=scenarioHeading,proto3" json:"scenarioHeading,omitempty"`
	// / Flag to indicate if the Scenario execution failed
	//
	// Deprecated: Marked as deprecated in spec.proto.
	Failed bool `protobuf:"varint,2,opt,name=failed,proto3" json:"failed,omitempty"`
	// / Collection of Context steps. The Context steps are executed before every run.
	Contexts []*ProtoItem `protobuf:"bytes,3,rep,name=contexts,proto3" json:"contexts,omitempty"`
	// / Collection of Items under a scenario. These could be Steps, Comments, Tags, TableDrivenScenarios or Tables
	ScenarioItems []*ProtoItem `protobuf:"bytes,4,rep,name=scenarioItems,proto3" json:"scenarioItems,omitempty"`
	// / Contains a 'before' hook failure message. This happens when the `before_scenario` hook has an error.
	PreHookFailure *ProtoHookFailure `protobuf:"bytes,5,opt,name=preHookFailure,proto3" json:"preHookFailure,omitempty"`
	// / Contains a 'after' hook failure message. This happens when the `after_scenario` hook has an error.
	PostHookFailure *ProtoHookFailure `protobuf:"bytes,6,opt,name=postHookFailure,proto3" json:"postHookFailure,omitempty"`
	// / Contains a list of tags that are defined at the specification level. Scenario tags are not present here.
	Tags []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	// / Holds the time taken for executing this scenario.
	ExecutionTime int64 `protobuf:"varint,8,opt,name=executionTime,proto3" json:"executionTime,omitempty"`
	// / Flag to indicate if the Scenario execution is skipped
	//
	// Deprecated: Marked as deprecated in spec.proto.
	Skipped bool `protobuf:"varint,9,opt,name=skipped,proto3" json:"skipped,omitempty"`
	// / Holds the error messages for skipping scenario from execution
	SkipErrors []string `protobuf:"bytes,10,rep,name=skipErrors,proto3" json:"skipErrors,omitempty"`
	// / Holds the unique Identifier of a scenario.
	ID string `protobuf:"bytes,11,opt,name=ID,proto3" json:"ID,omitempty"`
	// / Collection of Teardown steps. The Teardown steps are executed after every run.
	TearDownSteps []*ProtoItem `protobuf:"bytes,12,rep,name=tearDownSteps,proto3" json:"tearDownSteps,omitempty"`
	// / Span(start, end) of scenario
	Span *Span `protobuf:"bytes,13,opt,name=span,proto3" json:"span,omitempty"`
	// / Execution status for the scenario
	ExecutionStatus ExecutionStatus `protobuf:"varint,14,opt,name=executionStatus,proto3,enum=gauge.messages.ExecutionStatus" json:"executionStatus,omitempty"`
	// / Additional information at pre hook exec time to be available on reports
	PreHookMessages []string `protobuf:"bytes,15,rep,name=preHookMessages,proto3" json:"preHookMessages,omitempty"`
	// / Additional information at post hook exec time to be available on reports
	PostHookMessages []string `protobuf:"bytes,16,rep,name=postHookMessages,proto3" json:"postHookMessages,omitempty"`
	// / [DEPRECATED, use preHookMessages] Additional information at pre hook exec time to be available on reports
	//
	// Deprecated: Marked as deprecated in spec.proto.
	PreHookMessage []string `protobuf:"bytes,17,rep,name=preHookMessage,proto3" json:"preHookMessage,omitempty"`
	// / [DEPRECATED, use postHookMessages] Additional information at post hook exec time to be available on reports
	//
	// Deprecated: Marked as deprecated in spec.proto.
	PostHookMessage []string `protobuf:"bytes,18,rep,name=postHookMessage,proto3" json:"postHookMessage,omitempty"`
	// / [DEPRECATED, use preHookScreenshotFiles] Capture Screenshot at pre hook exec time to be available on reports
	//
	// Deprecated: Marked as deprecated in spec.proto.
	PreHookScreenshots [][]byte `protobuf:"bytes,19,rep,name=preHookScreenshots,proto3" json:"preHookScreenshots,omitempty"`
	// / [DEPRECATED, use postHookScreenshotFiles] Capture Screenshot at post hook exec time to be available on reports
	//
	// Deprecated: Marked as deprecated in spec.proto.
	PostHookScreenshots [][]byte `protobuf:"bytes,20,rep,name=postHookScreenshots,proto3" json:"postHookScreenshots,omitempty"`
	// / Screenshots captured on pre hook exec time to be available on reports
	PreHookScreenshotFiles []string `protobuf:"bytes,21,rep,name=preHookScreenshotFiles,proto3" json:"preHookScreenshotFiles,omitempty"`
	// / Screenshots captured on post hook exec time to be available on reports
	PostHookScreenshotFiles []string `protobuf:"bytes,22,rep,name=postHookScreenshotFiles,proto3" json:"postHookScreenshotFiles,omitempty"`
	// / Number of retires
	RetriesCount int64 `protobuf:"varint,23,opt,name=retriesCount,proto3" json:"retriesCount,omitempty"`
}

func (x *ProtoScenario) Reset() {
	*x = ProtoScenario{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoScenario) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoScenario) ProtoMessage() {}

func (x *ProtoScenario) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoScenario.ProtoReflect.Descriptor instead.
func (*ProtoScenario) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{2}
}

func (x *ProtoScenario) GetScenarioHeading() string {
	if x != nil {
		return x.ScenarioHeading
	}
	return ""
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoScenario) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *ProtoScenario) GetContexts() []*ProtoItem {
	if x != nil {
		return x.Contexts
	}
	return nil
}

func (x *ProtoScenario) GetScenarioItems() []*ProtoItem {
	if x != nil {
		return x.ScenarioItems
	}
	return nil
}

func (x *ProtoScenario) GetPreHookFailure() *ProtoHookFailure {
	if x != nil {
		return x.PreHookFailure
	}
	return nil
}

func (x *ProtoScenario) GetPostHookFailure() *ProtoHookFailure {
	if x != nil {
		return x.PostHookFailure
	}
	return nil
}

func (x *ProtoScenario) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProtoScenario) GetExecutionTime() int64 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoScenario) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *ProtoScenario) GetSkipErrors() []string {
	if x != nil {
		return x.SkipErrors
	}
	return nil
}

func (x *ProtoScenario) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ProtoScenario) GetTearDownSteps() []*ProtoItem {
	if x != nil {
		return x.TearDownSteps
	}
	return nil
}

func (x *ProtoScenario) GetSpan() *Span {
	if x != nil {
		return x.Span
	}
	return nil
}

func (x *ProtoScenario) GetExecutionStatus() ExecutionStatus {
	if x != nil {
		return x.ExecutionStatus
	}
	return ExecutionStatus_NOTEXECUTED
}

func (x *ProtoScenario) GetPreHookMessages() []string {
	if x != nil {
		return x.PreHookMessages
	}
	return nil
}

func (x *ProtoScenario) GetPostHookMessages() []string {
	if x != nil {
		return x.PostHookMessages
	}
	return nil
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoScenario) GetPreHookMessage() []string {
	if x != nil {
		return x.PreHookMessage
	}
	return nil
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoScenario) GetPostHookMessage() []string {
	if x != nil {
		return x.PostHookMessage
	}
	return nil
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoScenario) GetPreHookScreenshots() [][]byte {
	if x != nil {
		return x.PreHookScreenshots
	}
	return nil
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoScenario) GetPostHookScreenshots() [][]byte {
	if x != nil {
		return x.PostHookScreenshots
	}
	return nil
}

func (x *ProtoScenario) GetPreHookScreenshotFiles() []string {
	if x != nil {
		return x.PreHookScreenshotFiles
	}
	return nil
}

func (x *ProtoScenario) GetPostHookScreenshotFiles() []string {
	if x != nil {
		return x.PostHookScreenshotFiles
	}
	return nil
}

func (x *ProtoScenario) GetRetriesCount() int64 {
	if x != nil {
		return x.RetriesCount
	}
	return 0
}

// / A proto object representing a Span of content
type Span struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start     int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End       int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	StartChar int64 `protobuf:"varint,3,opt,name=startChar,proto3" json:"startChar,omitempty"`
	EndChar   int64 `protobuf:"varint,4,opt,name=endChar,proto3" json:"endChar,omitempty"`
}

func (x *Span) Reset() {
	*x = Span{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span) ProtoMessage() {}

func (x *Span) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span.ProtoReflect.Descriptor instead.
func (*Span) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{3}
}

func (x *Span) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Span) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Span) GetStartChar() int64 {
	if x != nil {
		return x.StartChar
	}
	return 0
}

func (x *Span) GetEndChar() int64 {
	if x != nil {
		return x.EndChar
	}
	return 0
}

// / A proto object representing a TableDrivenScenario
type ProtoTableDrivenScenario struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Scenario under Table driven execution
	Scenario *ProtoScenario `protobuf:"bytes,1,opt,name=scenario,proto3" json:"scenario,omitempty"`
	// / Row Index of data table against which the current scenario is executed
	TableRowIndex int32 `protobuf:"varint,2,opt,name=tableRowIndex,proto3" json:"tableRowIndex,omitempty"`
	// / Row Index of scenario data table against which the current scenario is executed
	ScenarioTableRowIndex int32 `protobuf:"varint,3,opt,name=scenarioTableRowIndex,proto3" json:"scenarioTableRowIndex,omitempty"`
	// / Executed against a spec data table
	IsSpecTableDriven bool `protobuf:"varint,4,opt,name=isSpecTableDriven,proto3" json:"isSpecTableDriven,omitempty"`
	// / Executed against a scenario data table
	IsScenarioTableDriven bool `protobuf:"varint,5,opt,name=isScenarioTableDriven,proto3" json:"isScenarioTableDriven,omitempty"`
	// / Holds the scenario data table
	ScenarioDataTable *ProtoTable `protobuf:"bytes,6,opt,name=scenarioDataTable,proto3" json:"scenarioDataTable,omitempty"`
	// / Hold the row of scenario data table.
	ScenarioTableRow *ProtoTable `protobuf:"bytes,7,opt,name=scenarioTableRow,proto3" json:"scenarioTableRow,omitempty"`
}

func (x *ProtoTableDrivenScenario) Reset() {
	*x = ProtoTableDrivenScenario{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTableDrivenScenario) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTableDrivenScenario) ProtoMessage() {}

func (x *ProtoTableDrivenScenario) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTableDrivenScenario.ProtoReflect.Descriptor instead.
func (*ProtoTableDrivenScenario) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{4}
}

func (x *ProtoTableDrivenScenario) GetScenario() *ProtoScenario {
	if x != nil {
		return x.Scenario
	}
	return nil
}

func (x *ProtoTableDrivenScenario) GetTableRowIndex() int32 {
	if x != nil {
		return x.TableRowIndex
	}
	return 0
}

func (x *ProtoTableDrivenScenario) GetScenarioTableRowIndex() int32 {
	if x != nil {
		return x.ScenarioTableRowIndex
	}
	return 0
}

func (x *ProtoTableDrivenScenario) GetIsSpecTableDriven() bool {
	if x != nil {
		return x.IsSpecTableDriven
	}
	return false
}

func (x *ProtoTableDrivenScenario) GetIsScenarioTableDriven() bool {
	if x != nil {
		return x.IsScenarioTableDriven
	}
	return false
}

func (x *ProtoTableDrivenScenario) GetScenarioDataTable() *ProtoTable {
	if x != nil {
		return x.ScenarioDataTable
	}
	return nil
}

func (x *ProtoTableDrivenScenario) GetScenarioTableRow() *ProtoTable {
	if x != nil {
		return x.ScenarioTableRow
	}
	return nil
}

// / A proto object representing a Step
type ProtoStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Holds the raw text of the Step as defined in the spec file. This contains the actual parameter values.
	ActualText string `protobuf:"bytes,1,opt,name=actualText,proto3" json:"actualText,omitempty"`
	// / Contains the parsed text of the Step. This will have placeholders for the parameters.
	ParsedText string `protobuf:"bytes,2,opt,name=parsedText,proto3" json:"parsedText,omitempty"`
	// / Collection of a list of fragments for a Step. A fragment could be either text or parameter.
	Fragments []*Fragment `protobuf:"bytes,3,rep,name=fragments,proto3" json:"fragments,omitempty"`
	// / Holds the result from the execution.
	StepExecutionResult *ProtoStepExecutionResult `protobuf:"bytes,4,opt,name=stepExecutionResult,proto3" json:"stepExecutionResult,omitempty"`
	// / Additional information at pre hook exec time to be available on reports
	PreHookMessages []string `protobuf:"bytes,5,rep,name=preHookMessages,proto3" json:"preHookMessages,omitempty"`
	// / Additional information at post hook exec time to be available on reports
	PostHookMessages []string `protobuf:"bytes,6,rep,name=postHookMessages,proto3" json:"postHookMessages,omitempty"`
	// / [DEPRECATED, use preHookScreenshotFiles] Capture Screenshot at pre hook exec time to be available on reports
	//
	// Deprecated: Marked as deprecated in spec.proto.
	PreHookScreenshots [][]byte `protobuf:"bytes,7,rep,name=preHookScreenshots,proto3" json:"preHookScreenshots,omitempty"`
	// / [DEPRECATED, use postHookScreenshotFiles] Capture Screenshot at post hook exec time to be available on reports
	//
	// Deprecated: Marked as deprecated in spec.proto.
	PostHookScreenshots [][]byte `protobuf:"bytes,8,rep,name=postHookScreenshots,proto3" json:"postHookScreenshots,omitempty"`
	// / Screenshots captured on pre hook exec time to be available on reports
	PreHookScreenshotFiles []string `protobuf:"bytes,9,rep,name=preHookScreenshotFiles,proto3" json:"preHookScreenshotFiles,omitempty"`
	// / Screenshots captured on post hook exec time to be available on reports
	PostHookScreenshotFiles []string `protobuf:"bytes,10,rep,name=postHookScreenshotFiles,proto3" json:"postHookScreenshotFiles,omitempty"`
}

func (x *ProtoStep) Reset() {
	*x = ProtoStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoStep) ProtoMessage() {}

func (x *ProtoStep) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoStep.ProtoReflect.Descriptor instead.
func (*ProtoStep) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{5}
}

func (x *ProtoStep) GetActualText() string {
	if x != nil {
		return x.ActualText
	}
	return ""
}

func (x *ProtoStep) GetParsedText() string {
	if x != nil {
		return x.ParsedText
	}
	return ""
}

func (x *ProtoStep) GetFragments() []*Fragment {
	if x != nil {
		return x.Fragments
	}
	return nil
}

func (x *ProtoStep) GetStepExecutionResult() *ProtoStepExecutionResult {
	if x != nil {
		return x.StepExecutionResult
	}
	return nil
}

func (x *ProtoStep) GetPreHookMessages() []string {
	if x != nil {
		return x.PreHookMessages
	}
	return nil
}

func (x *ProtoStep) GetPostHookMessages() []string {
	if x != nil {
		return x.PostHookMessages
	}
	return nil
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoStep) GetPreHookScreenshots() [][]byte {
	if x != nil {
		return x.PreHookScreenshots
	}
	return nil
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoStep) GetPostHookScreenshots() [][]byte {
	if x != nil {
		return x.PostHookScreenshots
	}
	return nil
}

func (x *ProtoStep) GetPreHookScreenshotFiles() []string {
	if x != nil {
		return x.PreHookScreenshotFiles
	}
	return nil
}

func (x *ProtoStep) GetPostHookScreenshotFiles() []string {
	if x != nil {
		return x.PostHookScreenshotFiles
	}
	return nil
}

// / Concept is a type of step, that can have multiple Steps.
// / But from a caller's perspective, it is still used as any other Step
// / A proto object representing a Concept
type ProtoConcept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Represents the Step value of a Concept.
	ConceptStep *ProtoStep `protobuf:"bytes,1,opt,name=conceptStep,proto3" json:"conceptStep,omitempty"`
	// / Collection of Steps in the given concepts.
	Steps []*ProtoItem `protobuf:"bytes,2,rep,name=steps,proto3" json:"steps,omitempty"`
	// / Holds the execution result.
	ConceptExecutionResult *ProtoStepExecutionResult `protobuf:"bytes,3,opt,name=conceptExecutionResult,proto3" json:"conceptExecutionResult,omitempty"`
}

func (x *ProtoConcept) Reset() {
	*x = ProtoConcept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoConcept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoConcept) ProtoMessage() {}

func (x *ProtoConcept) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoConcept.ProtoReflect.Descriptor instead.
func (*ProtoConcept) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{6}
}

func (x *ProtoConcept) GetConceptStep() *ProtoStep {
	if x != nil {
		return x.ConceptStep
	}
	return nil
}

func (x *ProtoConcept) GetSteps() []*ProtoItem {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *ProtoConcept) GetConceptExecutionResult() *ProtoStepExecutionResult {
	if x != nil {
		return x.ConceptExecutionResult
	}
	return nil
}

// / A proto object representing Tags
type ProtoTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / A collection of Tags
	Tags []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ProtoTags) Reset() {
	*x = ProtoTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTags) ProtoMessage() {}

func (x *ProtoTags) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTags.ProtoReflect.Descriptor instead.
func (*ProtoTags) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{7}
}

func (x *ProtoTags) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// / A proto object representing Fragment.
// / Fragments, put together make up A Step
type Fragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Type of Fragment, valid values are Text, Parameter
	FragmentType Fragment_FragmentType `protobuf:"varint,1,opt,name=fragmentType,proto3,enum=gauge.messages.Fragment_FragmentType" json:"fragmentType,omitempty"`
	// / Text part of the Fragment, valid only if FragmentType=Text
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// / Parameter part of the Fragment, valid only if FragmentType=Parameter
	Parameter *Parameter `protobuf:"bytes,3,opt,name=parameter,proto3" json:"parameter,omitempty"`
}

func (x *Fragment) Reset() {
	*x = Fragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fragment) ProtoMessage() {}

func (x *Fragment) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fragment.ProtoReflect.Descriptor instead.
func (*Fragment) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{8}
}

func (x *Fragment) GetFragmentType() Fragment_FragmentType {
	if x != nil {
		return x.FragmentType
	}
	return Fragment_Text
}

func (x *Fragment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Fragment) GetParameter() *Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

// / A proto object representing Fragment.
type Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Type of the Parameter. Valid values: Static, Dynamic, Special_String, Special_Table, Table
	ParameterType Parameter_ParameterType `protobuf:"varint,1,opt,name=parameterType,proto3,enum=gauge.messages.Parameter_ParameterType" json:"parameterType,omitempty"`
	// / Holds the value of the parameter
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// / Holds the name of the parameter, used as Key to lookup the value.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// / Holds the table value, if parameterType=Table or Special_Table
	Table *ProtoTable `protobuf:"bytes,4,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *Parameter) Reset() {
	*x = Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameter) ProtoMessage() {}

func (x *Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameter.ProtoReflect.Descriptor instead.
func (*Parameter) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{9}
}

func (x *Parameter) GetParameterType() Parameter_ParameterType {
	if x != nil {
		return x.ParameterType
	}
	return Parameter_Static
}

func (x *Parameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Parameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Parameter) GetTable() *ProtoTable {
	if x != nil {
		return x.Table
	}
	return nil
}

// / A proto object representing Comment.
type ProtoComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Text representing the Comment.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *ProtoComment) Reset() {
	*x = ProtoComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoComment) ProtoMessage() {}

func (x *ProtoComment) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoComment.ProtoReflect.Descriptor instead.
func (*ProtoComment) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{10}
}

func (x *ProtoComment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// / A proto object representing Table.
type ProtoTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Contains the Headers for the table
	Headers *ProtoTableRow `protobuf:"bytes,1,opt,name=headers,proto3" json:"headers,omitempty"`
	// / Contains the Rows for the table
	Rows []*ProtoTableRow `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *ProtoTable) Reset() {
	*x = ProtoTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTable) ProtoMessage() {}

func (x *ProtoTable) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTable.ProtoReflect.Descriptor instead.
func (*ProtoTable) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{11}
}

func (x *ProtoTable) GetHeaders() *ProtoTableRow {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ProtoTable) GetRows() []*ProtoTableRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

// / A proto object representing Table.
type ProtoTableRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Represents the cells of a given table
	Cells []string `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (x *ProtoTableRow) Reset() {
	*x = ProtoTableRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTableRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTableRow) ProtoMessage() {}

func (x *ProtoTableRow) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTableRow.ProtoReflect.Descriptor instead.
func (*ProtoTableRow) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{12}
}

func (x *ProtoTableRow) GetCells() []string {
	if x != nil {
		return x.Cells
	}
	return nil
}

// / A proto object representing Step Execution result
type ProtoStepExecutionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The actual result of the execution
	ExecutionResult *ProtoExecutionResult `protobuf:"bytes,1,opt,name=executionResult,proto3" json:"executionResult,omitempty"`
	// / Contains a 'before' hook failure message. This happens when the `before_step` hook has an error.
	PreHookFailure *ProtoHookFailure `protobuf:"bytes,2,opt,name=preHookFailure,proto3" json:"preHookFailure,omitempty"`
	// / Contains a 'after' hook failure message. This happens when the `after_step` hook has an error.
	PostHookFailure *ProtoHookFailure `protobuf:"bytes,3,opt,name=postHookFailure,proto3" json:"postHookFailure,omitempty"`
	Skipped         bool              `protobuf:"varint,4,opt,name=skipped,proto3" json:"skipped,omitempty"`
	SkippedReason   string            `protobuf:"bytes,5,opt,name=skippedReason,proto3" json:"skippedReason,omitempty"`
}

func (x *ProtoStepExecutionResult) Reset() {
	*x = ProtoStepExecutionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoStepExecutionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoStepExecutionResult) ProtoMessage() {}

func (x *ProtoStepExecutionResult) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoStepExecutionResult.ProtoReflect.Descriptor instead.
func (*ProtoStepExecutionResult) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{13}
}

func (x *ProtoStepExecutionResult) GetExecutionResult() *ProtoExecutionResult {
	if x != nil {
		return x.ExecutionResult
	}
	return nil
}

func (x *ProtoStepExecutionResult) GetPreHookFailure() *ProtoHookFailure {
	if x != nil {
		return x.PreHookFailure
	}
	return nil
}

func (x *ProtoStepExecutionResult) GetPostHookFailure() *ProtoHookFailure {
	if x != nil {
		return x.PostHookFailure
	}
	return nil
}

func (x *ProtoStepExecutionResult) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *ProtoStepExecutionResult) GetSkippedReason() string {
	if x != nil {
		return x.SkippedReason
	}
	return ""
}

// / A proto object representing the result of an execution
type ProtoExecutionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Flag to indicate failure
	Failed bool `protobuf:"varint,1,opt,name=failed,proto3" json:"failed,omitempty"`
	// / Flag to indicate if the error is recoverable from.
	RecoverableError bool `protobuf:"varint,2,opt,name=recoverableError,proto3" json:"recoverableError,omitempty"`
	// / The actual error message.
	ErrorMessage string `protobuf:"bytes,3,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	// / Stacktrace of the error
	StackTrace string `protobuf:"bytes,4,opt,name=stackTrace,proto3" json:"stackTrace,omitempty"`
	// / [DEPRECATED, use failureScreenshotFile] Bytes containing screenshot taken at the time of failure.
	//
	// Deprecated: Marked as deprecated in spec.proto.
	ScreenShot []byte `protobuf:"bytes,5,opt,name=screenShot,proto3" json:"screenShot,omitempty"`
	// / Holds the time taken for executing this scenario.
	ExecutionTime int64 `protobuf:"varint,6,opt,name=executionTime,proto3" json:"executionTime,omitempty"`
	// / Additional information at exec time to be available on reports
	Message []string `protobuf:"bytes,7,rep,name=message,proto3" json:"message,omitempty"`
	// / Type of the Error. Valid values: ASSERTION, VERIFICATION. Default: ASSERTION
	ErrorType ProtoExecutionResult_ErrorType `protobuf:"varint,8,opt,name=errorType,proto3,enum=gauge.messages.ProtoExecutionResult_ErrorType" json:"errorType,omitempty"`
	// / [DEPRECATED, use failureScreenshotFile] Bytes containing screenshot taken at the time of failure.
	//
	// Deprecated: Marked as deprecated in spec.proto.
	FailureScreenshot []byte `protobuf:"bytes,9,opt,name=failureScreenshot,proto3" json:"failureScreenshot,omitempty"`
	// / [DEPRECATED, use screenshotFiles] Bytes array containing screenshots at the time of it invoked
	//
	// Deprecated: Marked as deprecated in spec.proto.
	Screenshots [][]byte `protobuf:"bytes,10,rep,name=screenshots,proto3" json:"screenshots,omitempty"`
	// / Path to the screenshot file captured at the time of failure.
	FailureScreenshotFile string `protobuf:"bytes,11,opt,name=failureScreenshotFile,proto3" json:"failureScreenshotFile,omitempty"`
	// / Path to the screenshot files captured using Gauge screenshsot API.
	ScreenshotFiles []string `protobuf:"bytes,12,rep,name=screenshotFiles,proto3" json:"screenshotFiles,omitempty"`
	// / Flag to indicate skipping of the scenario execution
	SkipScenario bool `protobuf:"varint,13,opt,name=skipScenario,proto3" json:"skipScenario,omitempty"`
}

func (x *ProtoExecutionResult) Reset() {
	*x = ProtoExecutionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoExecutionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoExecutionResult) ProtoMessage() {}

func (x *ProtoExecutionResult) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoExecutionResult.ProtoReflect.Descriptor instead.
func (*ProtoExecutionResult) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{14}
}

func (x *ProtoExecutionResult) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *ProtoExecutionResult) GetRecoverableError() bool {
	if x != nil {
		return x.RecoverableError
	}
	return false
}

func (x *ProtoExecutionResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ProtoExecutionResult) GetStackTrace() string {
	if x != nil {
		return x.StackTrace
	}
	return ""
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoExecutionResult) GetScreenShot() []byte {
	if x != nil {
		return x.ScreenShot
	}
	return nil
}

func (x *ProtoExecutionResult) GetExecutionTime() int64 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *ProtoExecutionResult) GetMessage() []string {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ProtoExecutionResult) GetErrorType() ProtoExecutionResult_ErrorType {
	if x != nil {
		return x.ErrorType
	}
	return ProtoExecutionResult_ASSERTION
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoExecutionResult) GetFailureScreenshot() []byte {
	if x != nil {
		return x.FailureScreenshot
	}
	return nil
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoExecutionResult) GetScreenshots() [][]byte {
	if x != nil {
		return x.Screenshots
	}
	return nil
}

func (x *ProtoExecutionResult) GetFailureScreenshotFile() string {
	if x != nil {
		return x.FailureScreenshotFile
	}
	return ""
}

func (x *ProtoExecutionResult) GetScreenshotFiles() []string {
	if x != nil {
		return x.ScreenshotFiles
	}
	return nil
}

func (x *ProtoExecutionResult) GetSkipScenario() bool {
	if x != nil {
		return x.SkipScenario
	}
	return false
}

// / A proto object representing a pre-hook failure.
// / Used to hold failure information for before_suite, before_spec, before_scenario and before_spec hooks.
type ProtoHookFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Stacktrace from the failure
	StackTrace string `protobuf:"bytes,1,opt,name=stackTrace,proto3" json:"stackTrace,omitempty"`
	// / Error message from the failure
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	// / [DEPRECATED, use failureScreenshotFile] Bytes holding the screenshot taken at the time of failure.
	//
	// Deprecated: Marked as deprecated in spec.proto.
	ScreenShot []byte `protobuf:"bytes,3,opt,name=screenShot,proto3" json:"screenShot,omitempty"`
	// / Contains table row index corresponding to datatable rows
	TableRowIndex int32 `protobuf:"varint,4,opt,name=tableRowIndex,proto3" json:"tableRowIndex,omitempty"`
	// / [DEPRECATED, use failureScreenshotFile] Bytes holding the screenshot taken at the time of failure.
	//
	// Deprecated: Marked as deprecated in spec.proto.
	FailureScreenshot []byte `protobuf:"bytes,5,opt,name=failureScreenshot,proto3" json:"failureScreenshot,omitempty"`
	// / Path to the screenshot file captured at the time of failure.
	FailureScreenshotFile string `protobuf:"bytes,6,opt,name=failureScreenshotFile,proto3" json:"failureScreenshotFile,omitempty"`
}

func (x *ProtoHookFailure) Reset() {
	*x = ProtoHookFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoHookFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHookFailure) ProtoMessage() {}

func (x *ProtoHookFailure) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHookFailure.ProtoReflect.Descriptor instead.
func (*ProtoHookFailure) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{15}
}

func (x *ProtoHookFailure) GetStackTrace() string {
	if x != nil {
		return x.StackTrace
	}
	return ""
}

func (x *ProtoHookFailure) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoHookFailure) GetScreenShot() []byte {
	if x != nil {
		return x.ScreenShot
	}
	return nil
}

func (x *ProtoHookFailure) GetTableRowIndex() int32 {
	if x != nil {
		return x.TableRowIndex
	}
	return 0
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoHookFailure) GetFailureScreenshot() []byte {
	if x != nil {
		return x.FailureScreenshot
	}
	return nil
}

func (x *ProtoHookFailure) GetFailureScreenshotFile() string {
	if x != nil {
		return x.FailureScreenshotFile
	}
	return ""
}

// / A proto object representing the result of entire Suite execution.
type ProtoSuiteResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Contains the result from the execution
	SpecResults []*ProtoSpecResult `protobuf:"bytes,1,rep,name=specResults,proto3" json:"specResults,omitempty"`
	// / Contains a 'before' hook failure message. This happens when the `before_suite` hook has an error
	PreHookFailure *ProtoHookFailure `protobuf:"bytes,2,opt,name=preHookFailure,proto3" json:"preHookFailure,omitempty"`
	// / Contains a 'after' hook failure message. This happens when the `after_suite` hook has an error
	PostHookFailure *ProtoHookFailure `protobuf:"bytes,3,opt,name=postHookFailure,proto3" json:"postHookFailure,omitempty"`
	// / Flag to indicate failure
	Failed bool `protobuf:"varint,4,opt,name=failed,proto3" json:"failed,omitempty"`
	// / Holds the count of number of Specifications that failed.
	SpecsFailedCount int32 `protobuf:"varint,5,opt,name=specsFailedCount,proto3" json:"specsFailedCount,omitempty"`
	// / Holds the time taken for executing the whole suite.
	ExecutionTime int64 `protobuf:"varint,6,opt,name=executionTime,proto3" json:"executionTime,omitempty"`
	// / Holds a metric indicating the success rate of the execution.
	SuccessRate float32 `protobuf:"fixed32,7,opt,name=successRate,proto3" json:"successRate,omitempty"`
	// / The environment against which execution was done
	Environment string `protobuf:"bytes,8,opt,name=environment,proto3" json:"environment,omitempty"`
	// / Tag expression used for filtering specification
	Tags string `protobuf:"bytes,9,opt,name=tags,proto3" json:"tags,omitempty"`
	// / Project name
	ProjectName string `protobuf:"bytes,10,opt,name=projectName,proto3" json:"projectName,omitempty"`
	// / Timestamp of when execution started
	Timestamp         string `protobuf:"bytes,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SpecsSkippedCount int32  `protobuf:"varint,12,opt,name=specsSkippedCount,proto3" json:"specsSkippedCount,omitempty"`
	// / Additional information at pre hook exec time to be available on reports
	PreHookMessages []string `protobuf:"bytes,13,rep,name=preHookMessages,proto3" json:"preHookMessages,omitempty"`
	// / Additional information at post hook exec time to be available on reports
	PostHookMessages []string `protobuf:"bytes,14,rep,name=postHookMessages,proto3" json:"postHookMessages,omitempty"`
	// / [DEPRECATED, use preHookMessages] Additional information at pre hook exec time to be available on reports
	//
	// Deprecated: Marked as deprecated in spec.proto.
	PreHookMessage []string `protobuf:"bytes,15,rep,name=preHookMessage,proto3" json:"preHookMessage,omitempty"`
	// / [DEPRECATED, use postHookMessages] Additional information at post hook exec time to be available on reports
	//
	// Deprecated: Marked as deprecated in spec.proto.
	PostHookMessage []string `protobuf:"bytes,16,rep,name=postHookMessage,proto3" json:"postHookMessage,omitempty"`
	// / [DEPRECATED, use preHookScreenshotFiles] Capture Screenshot at pre hook exec time to be available on reports
	//
	// Deprecated: Marked as deprecated in spec.proto.
	PreHookScreenshots [][]byte `protobuf:"bytes,17,rep,name=preHookScreenshots,proto3" json:"preHookScreenshots,omitempty"`
	// / [DEPRECATED, use postHookScreenshotFiles] Capture Screenshot at post hook exec time to be available on reports
	//
	// Deprecated: Marked as deprecated in spec.proto.
	PostHookScreenshots [][]byte `protobuf:"bytes,18,rep,name=postHookScreenshots,proto3" json:"postHookScreenshots,omitempty"`
	// Indicates if the result is sent in chunks
	Chunked bool `protobuf:"varint,19,opt,name=chunked,proto3" json:"chunked,omitempty"`
	// Indicates the number of chunks to expect after this
	ChunkSize int64 `protobuf:"varint,20,opt,name=chunkSize,proto3" json:"chunkSize,omitempty"`
	// / Screenshots captured on pre hook exec time to be available on reports
	PreHookScreenshotFiles []string `protobuf:"bytes,21,rep,name=preHookScreenshotFiles,proto3" json:"preHookScreenshotFiles,omitempty"`
	// / Screenshots captured on post hook exec time to be available on reports
	PostHookScreenshotFiles []string `protobuf:"bytes,22,rep,name=postHookScreenshotFiles,proto3" json:"postHookScreenshotFiles,omitempty"`
}

func (x *ProtoSuiteResult) Reset() {
	*x = ProtoSuiteResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoSuiteResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSuiteResult) ProtoMessage() {}

func (x *ProtoSuiteResult) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSuiteResult.ProtoReflect.Descriptor instead.
func (*ProtoSuiteResult) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{16}
}

func (x *ProtoSuiteResult) GetSpecResults() []*ProtoSpecResult {
	if x != nil {
		return x.SpecResults
	}
	return nil
}

func (x *ProtoSuiteResult) GetPreHookFailure() *ProtoHookFailure {
	if x != nil {
		return x.PreHookFailure
	}
	return nil
}

func (x *ProtoSuiteResult) GetPostHookFailure() *ProtoHookFailure {
	if x != nil {
		return x.PostHookFailure
	}
	return nil
}

func (x *ProtoSuiteResult) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *ProtoSuiteResult) GetSpecsFailedCount() int32 {
	if x != nil {
		return x.SpecsFailedCount
	}
	return 0
}

func (x *ProtoSuiteResult) GetExecutionTime() int64 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *ProtoSuiteResult) GetSuccessRate() float32 {
	if x != nil {
		return x.SuccessRate
	}
	return 0
}

func (x *ProtoSuiteResult) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *ProtoSuiteResult) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *ProtoSuiteResult) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ProtoSuiteResult) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *ProtoSuiteResult) GetSpecsSkippedCount() int32 {
	if x != nil {
		return x.SpecsSkippedCount
	}
	return 0
}

func (x *ProtoSuiteResult) GetPreHookMessages() []string {
	if x != nil {
		return x.PreHookMessages
	}
	return nil
}

func (x *ProtoSuiteResult) GetPostHookMessages() []string {
	if x != nil {
		return x.PostHookMessages
	}
	return nil
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoSuiteResult) GetPreHookMessage() []string {
	if x != nil {
		return x.PreHookMessage
	}
	return nil
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoSuiteResult) GetPostHookMessage() []string {
	if x != nil {
		return x.PostHookMessage
	}
	return nil
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoSuiteResult) GetPreHookScreenshots() [][]byte {
	if x != nil {
		return x.PreHookScreenshots
	}
	return nil
}

// Deprecated: Marked as deprecated in spec.proto.
func (x *ProtoSuiteResult) GetPostHookScreenshots() [][]byte {
	if x != nil {
		return x.PostHookScreenshots
	}
	return nil
}

func (x *ProtoSuiteResult) GetChunked() bool {
	if x != nil {
		return x.Chunked
	}
	return false
}

func (x *ProtoSuiteResult) GetChunkSize() int64 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *ProtoSuiteResult) GetPreHookScreenshotFiles() []string {
	if x != nil {
		return x.PreHookScreenshotFiles
	}
	return nil
}

func (x *ProtoSuiteResult) GetPostHookScreenshotFiles() []string {
	if x != nil {
		return x.PostHookScreenshotFiles
	}
	return nil
}

// / A proto object representing the result of Spec execution.
type ProtoSpecResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Represents the corresponding Specification
	ProtoSpec *ProtoSpec `protobuf:"bytes,1,opt,name=protoSpec,proto3" json:"protoSpec,omitempty"`
	// / Holds the number of Scenarios executed
	ScenarioCount int32 `protobuf:"varint,2,opt,name=scenarioCount,proto3" json:"scenarioCount,omitempty"`
	// / Holds the number of Scenarios failed
	ScenarioFailedCount int32 `protobuf:"varint,3,opt,name=scenarioFailedCount,proto3" json:"scenarioFailedCount,omitempty"`
	// / Flag to indicate failure
	Failed bool `protobuf:"varint,4,opt,name=failed,proto3" json:"failed,omitempty"`
	// / Holds the row numbers, which caused the execution to fail.
	FailedDataTableRows []int32 `protobuf:"varint,5,rep,packed,name=failedDataTableRows,proto3" json:"failedDataTableRows,omitempty"`
	// / Holds the time taken for executing the spec.
	ExecutionTime int64 `protobuf:"varint,6,opt,name=executionTime,proto3" json:"executionTime,omitempty"`
	// / Flag to indicate if spec is skipped
	Skipped bool `protobuf:"varint,7,opt,name=skipped,proto3" json:"skipped,omitempty"`
	// / Holds the number of Scenarios skipped
	ScenarioSkippedCount int32 `protobuf:"varint,8,opt,name=scenarioSkippedCount,proto3" json:"scenarioSkippedCount,omitempty"`
	// / Holds the row numbers, for which the execution skipped.
	SkippedDataTableRows []int32 `protobuf:"varint,9,rep,packed,name=skippedDataTableRows,proto3" json:"skippedDataTableRows,omitempty"`
	// / Holds parse, validation and skipped errors.
	Errors []*Error `protobuf:"bytes,10,rep,name=errors,proto3" json:"errors,omitempty"`
	// / Holds the timestamp of event starting.
	Timestamp string `protobuf:"bytes,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ProtoSpecResult) Reset() {
	*x = ProtoSpecResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoSpecResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSpecResult) ProtoMessage() {}

func (x *ProtoSpecResult) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSpecResult.ProtoReflect.Descriptor instead.
func (*ProtoSpecResult) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{17}
}

func (x *ProtoSpecResult) GetProtoSpec() *ProtoSpec {
	if x != nil {
		return x.ProtoSpec
	}
	return nil
}

func (x *ProtoSpecResult) GetScenarioCount() int32 {
	if x != nil {
		return x.ScenarioCount
	}
	return 0
}

func (x *ProtoSpecResult) GetScenarioFailedCount() int32 {
	if x != nil {
		return x.ScenarioFailedCount
	}
	return 0
}

func (x *ProtoSpecResult) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *ProtoSpecResult) GetFailedDataTableRows() []int32 {
	if x != nil {
		return x.FailedDataTableRows
	}
	return nil
}

func (x *ProtoSpecResult) GetExecutionTime() int64 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *ProtoSpecResult) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *ProtoSpecResult) GetScenarioSkippedCount() int32 {
	if x != nil {
		return x.ScenarioSkippedCount
	}
	return 0
}

func (x *ProtoSpecResult) GetSkippedDataTableRows() []int32 {
	if x != nil {
		return x.SkippedDataTableRows
	}
	return nil
}

func (x *ProtoSpecResult) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ProtoSpecResult) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// / A proto object representing the result of Scenario execution.
type ProtoScenarioResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Collection of scenarios in scenario execution result.
	ProtoItem *ProtoItem `protobuf:"bytes,1,opt,name=protoItem,proto3" json:"protoItem,omitempty"`
	// / Holds the time taken for executing the whole suite.
	ExecutionTime int64 `protobuf:"varint,2,opt,name=executionTime,proto3" json:"executionTime,omitempty"`
	// / Holds the timestamp of event starting.
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ProtoScenarioResult) Reset() {
	*x = ProtoScenarioResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoScenarioResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoScenarioResult) ProtoMessage() {}

func (x *ProtoScenarioResult) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoScenarioResult.ProtoReflect.Descriptor instead.
func (*ProtoScenarioResult) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{18}
}

func (x *ProtoScenarioResult) GetProtoItem() *ProtoItem {
	if x != nil {
		return x.ProtoItem
	}
	return nil
}

func (x *ProtoScenarioResult) GetExecutionTime() int64 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *ProtoScenarioResult) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// / A proto object representing the result of Step execution.
type ProtoStepResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Collection of steps in step execution result.
	ProtoItem *ProtoItem `protobuf:"bytes,1,opt,name=protoItem,proto3" json:"protoItem,omitempty"`
	// / Holds the time taken for executing the whole suite.
	ExecutionTime int64 `protobuf:"varint,2,opt,name=executionTime,proto3" json:"executionTime,omitempty"`
	// / Holds the timestamp of event starting.
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ProtoStepResult) Reset() {
	*x = ProtoStepResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoStepResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoStepResult) ProtoMessage() {}

func (x *ProtoStepResult) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoStepResult.ProtoReflect.Descriptor instead.
func (*ProtoStepResult) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{19}
}

func (x *ProtoStepResult) GetProtoItem() *ProtoItem {
	if x != nil {
		return x.ProtoItem
	}
	return nil
}

func (x *ProtoStepResult) GetExecutionTime() int64 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *ProtoStepResult) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// / A proto object representing an error in spec/Scenario.
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Holds the type of error
	Type Error_ErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=gauge.messages.Error_ErrorType" json:"type,omitempty"`
	// / Holds the filename.
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	// / Holds the line number of the error in file.
	LineNumber int32 `protobuf:"varint,3,opt,name=lineNumber,proto3" json:"lineNumber,omitempty"`
	// / Holds the error message.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{20}
}

func (x *Error) GetType() Error_ErrorType {
	if x != nil {
		return x.Type
	}
	return Error_PARSE_ERROR
}

func (x *Error) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Error) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// / A proto object representing a Step value.
type ProtoStepValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The actual string value describing he Step
	StepValue string `protobuf:"bytes,1,opt,name=stepValue,proto3" json:"stepValue,omitempty"`
	// / The parameterized string value describing he Step. The parameters are replaced with placeholders.
	ParameterizedStepValue string `protobuf:"bytes,2,opt,name=parameterizedStepValue,proto3" json:"parameterizedStepValue,omitempty"`
	// / A collection of strings representing the parameters.
	Parameters []string `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *ProtoStepValue) Reset() {
	*x = ProtoStepValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spec_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoStepValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoStepValue) ProtoMessage() {}

func (x *ProtoStepValue) ProtoReflect() protoreflect.Message {
	mi := &file_spec_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoStepValue.ProtoReflect.Descriptor instead.
func (*ProtoStepValue) Descriptor() ([]byte, []int) {
	return file_spec_proto_rawDescGZIP(), []int{21}
}

func (x *ProtoStepValue) GetStepValue() string {
	if x != nil {
		return x.StepValue
	}
	return ""
}

func (x *ProtoStepValue) GetParameterizedStepValue() string {
	if x != nil {
		return x.ParameterizedStepValue
	}
	return ""
}

func (x *ProtoStepValue) GetParameters() []string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

var File_spec_proto protoreflect.FileDescriptor

var file_spec_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x67, 0x61,
	0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xf8, 0x05, 0x0a,
	0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70,
	0x65, 0x63, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x70, 0x65, 0x63, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61,
	0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x69, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x69,
	0x76, 0x65, 0x6e, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x4c, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x75, 0x67,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x10, 0x70, 0x6f, 0x73,
	0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x48,
	0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0e, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2c, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x70, 0x6f,
	0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x12, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x70,
	0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x12, 0x34, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x17, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17,
	0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68,
	0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xea, 0x04, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3e, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x39, 0x0a, 0x08,
	0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x08, 0x73,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x5a, 0x0a, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x13,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x75,
	0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61,
	0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x10, 0x04, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x10, 0x06, 0x22, 0xd1, 0x08, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x1a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x75,
	0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x0e,
	0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x4a,
	0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x6f,
	0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x48,
	0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x53, 0x74,
	0x65, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x75, 0x67,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x72, 0x44, 0x6f, 0x77, 0x6e, 0x53, 0x74,
	0x65, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x49, 0x0a,
	0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x48,
	0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6f,
	0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x48,
	0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x6f,
	0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x48,
	0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f,
	0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x13,
	0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x70,
	0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x6f,
	0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x70, 0x6f, 0x73,
	0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x66, 0x0a, 0x04, 0x53, 0x70, 0x61, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72,
	0x22, 0xa7, 0x03, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x39, 0x0a,
	0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x08,
	0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34,
	0x0a, 0x15, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x53, 0x70, 0x65, 0x63, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x69, 0x73, 0x53, 0x70, 0x65, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x69, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x11, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x22, 0x91, 0x04, 0x0a, 0x09, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61,
	0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x5a, 0x0a, 0x13, 0x73, 0x74, 0x65, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x13, 0x73, 0x74, 0x65, 0x70, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f,
	0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f,
	0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f,
	0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16,
	0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72,
	0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xde,
	0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12,
	0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x74, 0x65, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x2f, 0x0a, 0x05,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61,
	0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x60, 0x0a,
	0x16, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x1f, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x22, 0xcb, 0x01, 0x0a, 0x08, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a,
	0x0c, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x27, 0x0a, 0x0c, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x10, 0x01, 0x22, 0x92,
	0x02, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0d,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x5a, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x10, 0x04, 0x22, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x78, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x31,
	0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x22, 0x25, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x18, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52,
	0x0e, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12,
	0x4a, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74,
	0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xda, 0x04, 0x0a, 0x14,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0a,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x4c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x68, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x24, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x6b,
	0x69, 0x70, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x22, 0x2c, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x53, 0x53, 0x45, 0x52,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0x88, 0x02, 0x0a, 0x10, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x53, 0x68, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f,
	0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x11, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x34, 0x0a,
	0x15, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68,
	0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x22, 0xdf, 0x07, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b,
	0x73, 0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x70,
	0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f,
	0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x65,
	0x63, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x70, 0x65, 0x63, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x73, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x73, 0x70, 0x65, 0x63, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x48,
	0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x48, 0x6f,
	0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f,
	0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x16, 0x70, 0x72, 0x65, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x70,
	0x6f, 0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x70, 0x6f,
	0x73, 0x74, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xe1, 0x03, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x63, 0x65, 0x6e, 0x61,
	0x72, 0x69, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x63, 0x65, 0x6e,
	0x61, 0x72, 0x69, 0x6f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x13, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x6f, 0x77, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f,
	0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x2d, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x8e,
	0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xc6, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x32, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x65, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x2a, 0x47, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x53, 0x53, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x03, 0x42, 0x5c, 0x0a, 0x16, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x65, 0x74, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2f, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x61, 0x75, 0x67, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0xaa, 0x02, 0x0e, 0x47, 0x61, 0x75, 0x67, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spec_proto_rawDescOnce sync.Once
	file_spec_proto_rawDescData = file_spec_proto_rawDesc
)

func file_spec_proto_rawDescGZIP() []byte {
	file_spec_proto_rawDescOnce.Do(func() {
		file_spec_proto_rawDescData = protoimpl.X.CompressGZIP(file_spec_proto_rawDescData)
	})
	return file_spec_proto_rawDescData
}

var file_spec_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_spec_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_spec_proto_goTypes = []interface{}{
	(ExecutionStatus)(0),                // 0: gauge.messages.ExecutionStatus
	(ProtoItem_ItemType)(0),             // 1: gauge.messages.ProtoItem.ItemType
	(Fragment_FragmentType)(0),          // 2: gauge.messages.Fragment.FragmentType
	(Parameter_ParameterType)(0),        // 3: gauge.messages.Parameter.ParameterType
	(ProtoExecutionResult_ErrorType)(0), // 4: gauge.messages.ProtoExecutionResult.ErrorType
	(Error_ErrorType)(0),                // 5: gauge.messages.Error.ErrorType
	(*ProtoSpec)(nil),                   // 6: gauge.messages.ProtoSpec
	(*ProtoItem)(nil),                   // 7: gauge.messages.ProtoItem
	(*ProtoScenario)(nil),               // 8: gauge.messages.ProtoScenario
	(*Span)(nil),                        // 9: gauge.messages.Span
	(*ProtoTableDrivenScenario)(nil),    // 10: gauge.messages.ProtoTableDrivenScenario
	(*ProtoStep)(nil),                   // 11: gauge.messages.ProtoStep
	(*ProtoConcept)(nil),                // 12: gauge.messages.ProtoConcept
	(*ProtoTags)(nil),                   // 13: gauge.messages.ProtoTags
	(*Fragment)(nil),                    // 14: gauge.messages.Fragment
	(*Parameter)(nil),                   // 15: gauge.messages.Parameter
	(*ProtoComment)(nil),                // 16: gauge.messages.ProtoComment
	(*ProtoTable)(nil),                  // 17: gauge.messages.ProtoTable
	(*ProtoTableRow)(nil),               // 18: gauge.messages.ProtoTableRow
	(*ProtoStepExecutionResult)(nil),    // 19: gauge.messages.ProtoStepExecutionResult
	(*ProtoExecutionResult)(nil),        // 20: gauge.messages.ProtoExecutionResult
	(*ProtoHookFailure)(nil),            // 21: gauge.messages.ProtoHookFailure
	(*ProtoSuiteResult)(nil),            // 22: gauge.messages.ProtoSuiteResult
	(*ProtoSpecResult)(nil),             // 23: gauge.messages.ProtoSpecResult
	(*ProtoScenarioResult)(nil),         // 24: gauge.messages.ProtoScenarioResult
	(*ProtoStepResult)(nil),             // 25: gauge.messages.ProtoStepResult
	(*Error)(nil),                       // 26: gauge.messages.Error
	(*ProtoStepValue)(nil),              // 27: gauge.messages.ProtoStepValue
}
var file_spec_proto_depIdxs = []int32{
	7,  // 0: gauge.messages.ProtoSpec.items:type_name -> gauge.messages.ProtoItem
	21, // 1: gauge.messages.ProtoSpec.preHookFailures:type_name -> gauge.messages.ProtoHookFailure
	21, // 2: gauge.messages.ProtoSpec.postHookFailures:type_name -> gauge.messages.ProtoHookFailure
	1,  // 3: gauge.messages.ProtoItem.itemType:type_name -> gauge.messages.ProtoItem.ItemType
	11, // 4: gauge.messages.ProtoItem.step:type_name -> gauge.messages.ProtoStep
	12, // 5: gauge.messages.ProtoItem.concept:type_name -> gauge.messages.ProtoConcept
	8,  // 6: gauge.messages.ProtoItem.scenario:type_name -> gauge.messages.ProtoScenario
	10, // 7: gauge.messages.ProtoItem.tableDrivenScenario:type_name -> gauge.messages.ProtoTableDrivenScenario
	16, // 8: gauge.messages.ProtoItem.comment:type_name -> gauge.messages.ProtoComment
	17, // 9: gauge.messages.ProtoItem.table:type_name -> gauge.messages.ProtoTable
	13, // 10: gauge.messages.ProtoItem.tags:type_name -> gauge.messages.ProtoTags
	7,  // 11: gauge.messages.ProtoScenario.contexts:type_name -> gauge.messages.ProtoItem
	7,  // 12: gauge.messages.ProtoScenario.scenarioItems:type_name -> gauge.messages.ProtoItem
	21, // 13: gauge.messages.ProtoScenario.preHookFailure:type_name -> gauge.messages.ProtoHookFailure
	21, // 14: gauge.messages.ProtoScenario.postHookFailure:type_name -> gauge.messages.ProtoHookFailure
	7,  // 15: gauge.messages.ProtoScenario.tearDownSteps:type_name -> gauge.messages.ProtoItem
	9,  // 16: gauge.messages.ProtoScenario.span:type_name -> gauge.messages.Span
	0,  // 17: gauge.messages.ProtoScenario.executionStatus:type_name -> gauge.messages.ExecutionStatus
	8,  // 18: gauge.messages.ProtoTableDrivenScenario.scenario:type_name -> gauge.messages.ProtoScenario
	17, // 19: gauge.messages.ProtoTableDrivenScenario.scenarioDataTable:type_name -> gauge.messages.ProtoTable
	17, // 20: gauge.messages.ProtoTableDrivenScenario.scenarioTableRow:type_name -> gauge.messages.ProtoTable
	14, // 21: gauge.messages.ProtoStep.fragments:type_name -> gauge.messages.Fragment
	19, // 22: gauge.messages.ProtoStep.stepExecutionResult:type_name -> gauge.messages.ProtoStepExecutionResult
	11, // 23: gauge.messages.ProtoConcept.conceptStep:type_name -> gauge.messages.ProtoStep
	7,  // 24: gauge.messages.ProtoConcept.steps:type_name -> gauge.messages.ProtoItem
	19, // 25: gauge.messages.ProtoConcept.conceptExecutionResult:type_name -> gauge.messages.ProtoStepExecutionResult
	2,  // 26: gauge.messages.Fragment.fragmentType:type_name -> gauge.messages.Fragment.FragmentType
	15, // 27: gauge.messages.Fragment.parameter:type_name -> gauge.messages.Parameter
	3,  // 28: gauge.messages.Parameter.parameterType:type_name -> gauge.messages.Parameter.ParameterType
	17, // 29: gauge.messages.Parameter.table:type_name -> gauge.messages.ProtoTable
	18, // 30: gauge.messages.ProtoTable.headers:type_name -> gauge.messages.ProtoTableRow
	18, // 31: gauge.messages.ProtoTable.rows:type_name -> gauge.messages.ProtoTableRow
	20, // 32: gauge.messages.ProtoStepExecutionResult.executionResult:type_name -> gauge.messages.ProtoExecutionResult
	21, // 33: gauge.messages.ProtoStepExecutionResult.preHookFailure:type_name -> gauge.messages.ProtoHookFailure
	21, // 34: gauge.messages.ProtoStepExecutionResult.postHookFailure:type_name -> gauge.messages.ProtoHookFailure
	4,  // 35: gauge.messages.ProtoExecutionResult.errorType:type_name -> gauge.messages.ProtoExecutionResult.ErrorType
	23, // 36: gauge.messages.ProtoSuiteResult.specResults:type_name -> gauge.messages.ProtoSpecResult
	21, // 37: gauge.messages.ProtoSuiteResult.preHookFailure:type_name -> gauge.messages.ProtoHookFailure
	21, // 38: gauge.messages.ProtoSuiteResult.postHookFailure:type_name -> gauge.messages.ProtoHookFailure
	6,  // 39: gauge.messages.ProtoSpecResult.protoSpec:type_name -> gauge.messages.ProtoSpec
	26, // 40: gauge.messages.ProtoSpecResult.errors:type_name -> gauge.messages.Error
	7,  // 41: gauge.messages.ProtoScenarioResult.protoItem:type_name -> gauge.messages.ProtoItem
	7,  // 42: gauge.messages.ProtoStepResult.protoItem:type_name -> gauge.messages.ProtoItem
	5,  // 43: gauge.messages.Error.type:type_name -> gauge.messages.Error.ErrorType
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_spec_proto_init() }
func file_spec_proto_init() {
	if File_spec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoScenario); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Span); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTableDrivenScenario); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoConcept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTableRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoStepExecutionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoExecutionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoHookFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoSuiteResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoSpecResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoScenarioResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoStepResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spec_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoStepValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spec_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spec_proto_goTypes,
		DependencyIndexes: file_spec_proto_depIdxs,
		EnumInfos:         file_spec_proto_enumTypes,
		MessageInfos:      file_spec_proto_msgTypes,
	}.Build()
	File_spec_proto = out.File
	file_spec_proto_rawDesc = nil
	file_spec_proto_goTypes = nil
	file_spec_proto_depIdxs = nil
}
