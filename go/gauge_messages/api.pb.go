//----------------------------------------------------------------
//  Copyright (c) ThoughtWorks, Inc.
//  Licensed under the Apache License, Version 2.0
//  See LICENSE in the project root for license information.
//----------------------------------------------------------------

// The comments are exported to Markdown, hence they may contain markdown syntax and cross-refs.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: api.proto

package gauge_messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type APIMessage_APIMessageType int32

const (
	APIMessage_GetProjectRootRequest            APIMessage_APIMessageType = 0
	APIMessage_GetProjectRootResponse           APIMessage_APIMessageType = 1
	APIMessage_GetInstallationRootRequest       APIMessage_APIMessageType = 2
	APIMessage_GetInstallationRootResponse      APIMessage_APIMessageType = 3
	APIMessage_GetAllStepsRequest               APIMessage_APIMessageType = 4
	APIMessage_GetAllStepResponse               APIMessage_APIMessageType = 5
	APIMessage_SpecsRequest                     APIMessage_APIMessageType = 6
	APIMessage_SpecsResponse                    APIMessage_APIMessageType = 7
	APIMessage_GetStepValueRequest              APIMessage_APIMessageType = 8
	APIMessage_GetStepValueResponse             APIMessage_APIMessageType = 9
	APIMessage_GetLanguagePluginLibPathRequest  APIMessage_APIMessageType = 10
	APIMessage_GetLanguagePluginLibPathResponse APIMessage_APIMessageType = 11
	APIMessage_ErrorResponse                    APIMessage_APIMessageType = 12
	APIMessage_GetAllConceptsRequest            APIMessage_APIMessageType = 13
	APIMessage_GetAllConceptsResponse           APIMessage_APIMessageType = 14
	APIMessage_PerformRefactoringRequest        APIMessage_APIMessageType = 15
	APIMessage_PerformRefactoringResponse       APIMessage_APIMessageType = 16
	APIMessage_ExtractConceptRequest            APIMessage_APIMessageType = 17
	APIMessage_ExtractConceptResponse           APIMessage_APIMessageType = 18
	APIMessage_FormatSpecsRequest               APIMessage_APIMessageType = 19
	APIMessage_FormatSpecsResponse              APIMessage_APIMessageType = 20
	APIMessage_UnsupportedApiMessageResponse    APIMessage_APIMessageType = 21
)

// Enum value maps for APIMessage_APIMessageType.
var (
	APIMessage_APIMessageType_name = map[int32]string{
		0:  "GetProjectRootRequest",
		1:  "GetProjectRootResponse",
		2:  "GetInstallationRootRequest",
		3:  "GetInstallationRootResponse",
		4:  "GetAllStepsRequest",
		5:  "GetAllStepResponse",
		6:  "SpecsRequest",
		7:  "SpecsResponse",
		8:  "GetStepValueRequest",
		9:  "GetStepValueResponse",
		10: "GetLanguagePluginLibPathRequest",
		11: "GetLanguagePluginLibPathResponse",
		12: "ErrorResponse",
		13: "GetAllConceptsRequest",
		14: "GetAllConceptsResponse",
		15: "PerformRefactoringRequest",
		16: "PerformRefactoringResponse",
		17: "ExtractConceptRequest",
		18: "ExtractConceptResponse",
		19: "FormatSpecsRequest",
		20: "FormatSpecsResponse",
		21: "UnsupportedApiMessageResponse",
	}
	APIMessage_APIMessageType_value = map[string]int32{
		"GetProjectRootRequest":            0,
		"GetProjectRootResponse":           1,
		"GetInstallationRootRequest":       2,
		"GetInstallationRootResponse":      3,
		"GetAllStepsRequest":               4,
		"GetAllStepResponse":               5,
		"SpecsRequest":                     6,
		"SpecsResponse":                    7,
		"GetStepValueRequest":              8,
		"GetStepValueResponse":             9,
		"GetLanguagePluginLibPathRequest":  10,
		"GetLanguagePluginLibPathResponse": 11,
		"ErrorResponse":                    12,
		"GetAllConceptsRequest":            13,
		"GetAllConceptsResponse":           14,
		"PerformRefactoringRequest":        15,
		"PerformRefactoringResponse":       16,
		"ExtractConceptRequest":            17,
		"ExtractConceptResponse":           18,
		"FormatSpecsRequest":               19,
		"FormatSpecsResponse":              20,
		"UnsupportedApiMessageResponse":    21,
	}
)

func (x APIMessage_APIMessageType) Enum() *APIMessage_APIMessageType {
	p := new(APIMessage_APIMessageType)
	*p = x
	return p
}

func (x APIMessage_APIMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APIMessage_APIMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[0].Descriptor()
}

func (APIMessage_APIMessageType) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[0]
}

func (x APIMessage_APIMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use APIMessage_APIMessageType.Descriptor instead.
func (APIMessage_APIMessageType) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{25, 0}
}

// / Request to get the Root Directory of the project
type GetProjectRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProjectRootRequest) Reset() {
	*x = GetProjectRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRootRequest) ProtoMessage() {}

func (x *GetProjectRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRootRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRootRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

// / Response of GetProjectRootRequest.
type GetProjectRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Holds the absolute path of the Project Root directory.
	ProjectRoot string `protobuf:"bytes,1,opt,name=projectRoot,proto3" json:"projectRoot,omitempty"`
}

func (x *GetProjectRootResponse) Reset() {
	*x = GetProjectRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRootResponse) ProtoMessage() {}

func (x *GetProjectRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRootResponse.ProtoReflect.Descriptor instead.
func (*GetProjectRootResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *GetProjectRootResponse) GetProjectRoot() string {
	if x != nil {
		return x.ProjectRoot
	}
	return ""
}

// / Request to get the Root Directory of the Gauge installation
type GetInstallationRootRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetInstallationRootRequest) Reset() {
	*x = GetInstallationRootRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstallationRootRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstallationRootRequest) ProtoMessage() {}

func (x *GetInstallationRootRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstallationRootRequest.ProtoReflect.Descriptor instead.
func (*GetInstallationRootRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

// / Response of GetInstallationRootRequest
type GetInstallationRootResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Holds the absolute path of the Gauge installation directory
	InstallationRoot string `protobuf:"bytes,1,opt,name=installationRoot,proto3" json:"installationRoot,omitempty"`
}

func (x *GetInstallationRootResponse) Reset() {
	*x = GetInstallationRootResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstallationRootResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstallationRootResponse) ProtoMessage() {}

func (x *GetInstallationRootResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstallationRootResponse.ProtoReflect.Descriptor instead.
func (*GetInstallationRootResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetInstallationRootResponse) GetInstallationRoot() string {
	if x != nil {
		return x.InstallationRoot
	}
	return ""
}

// / Request to get all Steps in the project
type GetAllStepsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllStepsRequest) Reset() {
	*x = GetAllStepsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllStepsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllStepsRequest) ProtoMessage() {}

func (x *GetAllStepsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllStepsRequest.ProtoReflect.Descriptor instead.
func (*GetAllStepsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

// / Response to GetAllStepsRequest
type GetAllStepsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Holds a collection of Steps that are defined in the project.
	AllSteps []*ProtoStepValue `protobuf:"bytes,1,rep,name=allSteps,proto3" json:"allSteps,omitempty"`
}

func (x *GetAllStepsResponse) Reset() {
	*x = GetAllStepsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllStepsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllStepsResponse) ProtoMessage() {}

func (x *GetAllStepsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllStepsResponse.ProtoReflect.Descriptor instead.
func (*GetAllStepsResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *GetAllStepsResponse) GetAllSteps() []*ProtoStepValue {
	if x != nil {
		return x.AllSteps
	}
	return nil
}

// / Request to get all Specs in the project
type SpecsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Specs []string `protobuf:"bytes,1,rep,name=specs,proto3" json:"specs,omitempty"`
}

func (x *SpecsRequest) Reset() {
	*x = SpecsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecsRequest) ProtoMessage() {}

func (x *SpecsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecsRequest.ProtoReflect.Descriptor instead.
func (*SpecsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *SpecsRequest) GetSpecs() []string {
	if x != nil {
		return x.Specs
	}
	return nil
}

// / Response to GetAllSpecsRequest
type SpecsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Holds a collection of Spec details.
	Details []*SpecsResponse_SpecDetail `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *SpecsResponse) Reset() {
	*x = SpecsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecsResponse) ProtoMessage() {}

func (x *SpecsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecsResponse.ProtoReflect.Descriptor instead.
func (*SpecsResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

func (x *SpecsResponse) GetDetails() []*SpecsResponse_SpecDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

// / Request to get all Concepts in the project
type GetAllConceptsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllConceptsRequest) Reset() {
	*x = GetAllConceptsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllConceptsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllConceptsRequest) ProtoMessage() {}

func (x *GetAllConceptsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllConceptsRequest.ProtoReflect.Descriptor instead.
func (*GetAllConceptsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

// / Response to GetAllConceptsResponse
type GetAllConceptsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Holds a collection of Concepts that are defined in the project.
	Concepts []*ConceptInfo `protobuf:"bytes,1,rep,name=concepts,proto3" json:"concepts,omitempty"`
}

func (x *GetAllConceptsResponse) Reset() {
	*x = GetAllConceptsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllConceptsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllConceptsResponse) ProtoMessage() {}

func (x *GetAllConceptsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllConceptsResponse.ProtoReflect.Descriptor instead.
func (*GetAllConceptsResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetAllConceptsResponse) GetConcepts() []*ConceptInfo {
	if x != nil {
		return x.Concepts
	}
	return nil
}

// / Details of a Concept
type ConceptInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The text that defines a concept
	StepValue *ProtoStepValue `protobuf:"bytes,1,opt,name=stepValue,proto3" json:"stepValue,omitempty"`
	// / The absolute path to the file that contains the Concept
	Filepath string `protobuf:"bytes,2,opt,name=filepath,proto3" json:"filepath,omitempty"`
	// / The line number in the file where the concept is defined.
	LineNumber int32 `protobuf:"varint,3,opt,name=lineNumber,proto3" json:"lineNumber,omitempty"`
}

func (x *ConceptInfo) Reset() {
	*x = ConceptInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptInfo) ProtoMessage() {}

func (x *ConceptInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptInfo.ProtoReflect.Descriptor instead.
func (*ConceptInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *ConceptInfo) GetStepValue() *ProtoStepValue {
	if x != nil {
		return x.StepValue
	}
	return nil
}

func (x *ConceptInfo) GetFilepath() string {
	if x != nil {
		return x.Filepath
	}
	return ""
}

func (x *ConceptInfo) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

// / Request to get a Step Value.
type GetStepValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The text of the Step.
	StepText string `protobuf:"bytes,1,opt,name=stepText,proto3" json:"stepText,omitempty"`
	// / Flag to indicate if the Step has an inline table.
	HasInlineTable bool `protobuf:"varint,2,opt,name=hasInlineTable,proto3" json:"hasInlineTable,omitempty"`
}

func (x *GetStepValueRequest) Reset() {
	*x = GetStepValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStepValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStepValueRequest) ProtoMessage() {}

func (x *GetStepValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStepValueRequest.ProtoReflect.Descriptor instead.
func (*GetStepValueRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

func (x *GetStepValueRequest) GetStepText() string {
	if x != nil {
		return x.StepText
	}
	return ""
}

func (x *GetStepValueRequest) GetHasInlineTable() bool {
	if x != nil {
		return x.HasInlineTable
	}
	return false
}

// / Response to GetStepValueRequest
type GetStepValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The Step corresponding to the request provided.
	StepValue *ProtoStepValue `protobuf:"bytes,1,opt,name=stepValue,proto3" json:"stepValue,omitempty"`
}

func (x *GetStepValueResponse) Reset() {
	*x = GetStepValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStepValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStepValueResponse) ProtoMessage() {}

func (x *GetStepValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStepValueResponse.ProtoReflect.Descriptor instead.
func (*GetStepValueResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

func (x *GetStepValueResponse) GetStepValue() *ProtoStepValue {
	if x != nil {
		return x.StepValue
	}
	return nil
}

// / Request to get the location of language plugin's Lib directory
type GetLanguagePluginLibPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The language to locate the lib directory for.
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetLanguagePluginLibPathRequest) Reset() {
	*x = GetLanguagePluginLibPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLanguagePluginLibPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLanguagePluginLibPathRequest) ProtoMessage() {}

func (x *GetLanguagePluginLibPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLanguagePluginLibPathRequest.ProtoReflect.Descriptor instead.
func (*GetLanguagePluginLibPathRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13}
}

func (x *GetLanguagePluginLibPathRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// / Response to GetLanguagePluginLibPathRequest
type GetLanguagePluginLibPathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Absolute path to the Lib directory of the language.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *GetLanguagePluginLibPathResponse) Reset() {
	*x = GetLanguagePluginLibPathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLanguagePluginLibPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLanguagePluginLibPathResponse) ProtoMessage() {}

func (x *GetLanguagePluginLibPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLanguagePluginLibPathResponse.ProtoReflect.Descriptor instead.
func (*GetLanguagePluginLibPathResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{14}
}

func (x *GetLanguagePluginLibPathResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// / A generic failure response
type ErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Actual error message
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{15}
}

func (x *ErrorResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// / Request to perform a Refactor
type PerformRefactoringRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Step to refactor
	OldStep string `protobuf:"bytes,1,opt,name=oldStep,proto3" json:"oldStep,omitempty"`
	// / Change to be made
	NewStep string `protobuf:"bytes,2,opt,name=newStep,proto3" json:"newStep,omitempty"`
}

func (x *PerformRefactoringRequest) Reset() {
	*x = PerformRefactoringRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformRefactoringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformRefactoringRequest) ProtoMessage() {}

func (x *PerformRefactoringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformRefactoringRequest.ProtoReflect.Descriptor instead.
func (*PerformRefactoringRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{16}
}

func (x *PerformRefactoringRequest) GetOldStep() string {
	if x != nil {
		return x.OldStep
	}
	return ""
}

func (x *PerformRefactoringRequest) GetNewStep() string {
	if x != nil {
		return x.NewStep
	}
	return ""
}

// / Response to PerformRefactoringRequest
type PerformRefactoringResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Flag indicating Success
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// / Error message if the refactoring was unsuccessful.
	Errors []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// / Collection of files that were changed as part of the Refactoring.
	FilesChanged []string `protobuf:"bytes,3,rep,name=filesChanged,proto3" json:"filesChanged,omitempty"`
}

func (x *PerformRefactoringResponse) Reset() {
	*x = PerformRefactoringResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformRefactoringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformRefactoringResponse) ProtoMessage() {}

func (x *PerformRefactoringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformRefactoringResponse.ProtoReflect.Descriptor instead.
func (*PerformRefactoringResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{17}
}

func (x *PerformRefactoringResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PerformRefactoringResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *PerformRefactoringResponse) GetFilesChanged() []string {
	if x != nil {
		return x.FilesChanged
	}
	return nil
}

// / Request to perform Extract to Concept refactoring
type ExtractConceptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The Concept name given by the user
	ConceptName *Step `protobuf:"bytes,1,opt,name=conceptName,proto3" json:"conceptName,omitempty"`
	// / steps to extract
	Steps []*Step `protobuf:"bytes,2,rep,name=steps,proto3" json:"steps,omitempty"`
	// / Flag indicating if refactoring should be done across project
	ChangeAcrossProject bool `protobuf:"varint,3,opt,name=changeAcrossProject,proto3" json:"changeAcrossProject,omitempty"`
	// / The concept filename in which extracted concept will be added
	ConceptFileName string `protobuf:"bytes,4,opt,name=conceptFileName,proto3" json:"conceptFileName,omitempty"`
	// / Info related to selected text, only if changeAcrossProject is false
	SelectedTextInfo *TextInfo `protobuf:"bytes,5,opt,name=selectedTextInfo,proto3" json:"selectedTextInfo,omitempty"`
}

func (x *ExtractConceptRequest) Reset() {
	*x = ExtractConceptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractConceptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractConceptRequest) ProtoMessage() {}

func (x *ExtractConceptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractConceptRequest.ProtoReflect.Descriptor instead.
func (*ExtractConceptRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{18}
}

func (x *ExtractConceptRequest) GetConceptName() *Step {
	if x != nil {
		return x.ConceptName
	}
	return nil
}

func (x *ExtractConceptRequest) GetSteps() []*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *ExtractConceptRequest) GetChangeAcrossProject() bool {
	if x != nil {
		return x.ChangeAcrossProject
	}
	return false
}

func (x *ExtractConceptRequest) GetConceptFileName() string {
	if x != nil {
		return x.ConceptFileName
	}
	return ""
}

func (x *ExtractConceptRequest) GetSelectedTextInfo() *TextInfo {
	if x != nil {
		return x.SelectedTextInfo
	}
	return nil
}

type TextInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The filename from where concept is being extracted
	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// / storing the starting and ending line number of selected text
	StartingLineNo int32 `protobuf:"varint,2,opt,name=startingLineNo,proto3" json:"startingLineNo,omitempty"`
	EndLineNo      int32 `protobuf:"varint,3,opt,name=endLineNo,proto3" json:"endLineNo,omitempty"`
}

func (x *TextInfo) Reset() {
	*x = TextInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextInfo) ProtoMessage() {}

func (x *TextInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextInfo.ProtoReflect.Descriptor instead.
func (*TextInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{19}
}

func (x *TextInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *TextInfo) GetStartingLineNo() int32 {
	if x != nil {
		return x.StartingLineNo
	}
	return 0
}

func (x *TextInfo) GetEndLineNo() int32 {
	if x != nil {
		return x.EndLineNo
	}
	return 0
}

type Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / name of the step
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// /  table present in step as parameter
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// / name of table in concept heading, if it comes as a param to concept
	ParamTableName string `protobuf:"bytes,3,opt,name=paramTableName,proto3" json:"paramTableName,omitempty"`
}

func (x *Step) Reset() {
	*x = Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step) ProtoMessage() {}

func (x *Step) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step.ProtoReflect.Descriptor instead.
func (*Step) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{20}
}

func (x *Step) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Step) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Step) GetParamTableName() string {
	if x != nil {
		return x.ParamTableName
	}
	return ""
}

// / Response to perform Extract to Concept refactoring
type ExtractConceptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Flag indicating Success
	IsSuccess bool `protobuf:"varint,1,opt,name=isSuccess,proto3" json:"isSuccess,omitempty"`
	// / Error message if the refactoring was unsuccessful.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// / Collection of files that were changed as part of the Refactoring.
	FilesChanged []string `protobuf:"bytes,3,rep,name=filesChanged,proto3" json:"filesChanged,omitempty"`
}

func (x *ExtractConceptResponse) Reset() {
	*x = ExtractConceptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractConceptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractConceptResponse) ProtoMessage() {}

func (x *ExtractConceptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractConceptResponse.ProtoReflect.Descriptor instead.
func (*ExtractConceptResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{21}
}

func (x *ExtractConceptResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *ExtractConceptResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ExtractConceptResponse) GetFilesChanged() []string {
	if x != nil {
		return x.FilesChanged
	}
	return nil
}

// / Request to format spec files
type FormatSpecsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Specs to be formatted
	Specs []string `protobuf:"bytes,1,rep,name=specs,proto3" json:"specs,omitempty"`
}

func (x *FormatSpecsRequest) Reset() {
	*x = FormatSpecsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatSpecsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatSpecsRequest) ProtoMessage() {}

func (x *FormatSpecsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatSpecsRequest.ProtoReflect.Descriptor instead.
func (*FormatSpecsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{22}
}

func (x *FormatSpecsRequest) GetSpecs() []string {
	if x != nil {
		return x.Specs
	}
	return nil
}

// / Response on formatting spec files
type FormatSpecsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Errors occurred on formatting
	Errors []string `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	// / Warnings occurred on formatting
	Warnings []string `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *FormatSpecsResponse) Reset() {
	*x = FormatSpecsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatSpecsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatSpecsResponse) ProtoMessage() {}

func (x *FormatSpecsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatSpecsResponse.ProtoReflect.Descriptor instead.
func (*FormatSpecsResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{23}
}

func (x *FormatSpecsResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *FormatSpecsResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// / Response when a API message request is not supported.
type UnsupportedApiMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnsupportedApiMessageResponse) Reset() {
	*x = UnsupportedApiMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsupportedApiMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsupportedApiMessageResponse) ProtoMessage() {}

func (x *UnsupportedApiMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsupportedApiMessageResponse.ProtoReflect.Descriptor instead.
func (*UnsupportedApiMessageResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{24}
}

// / A generic message composing of all possible operations.
// / One of the Request/Response fields will have value, depending on the MessageType set.
type APIMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Type of API call being made
	MessageType APIMessage_APIMessageType `protobuf:"varint,1,opt,name=messageType,proto3,enum=gauge.messages.APIMessage_APIMessageType" json:"messageType,omitempty"`
	// / A unique id to represent this message. A response to the message should copy over this value.
	// / This is used to synchronize messages & responses
	MessageId int64 `protobuf:"varint,2,opt,name=messageId,proto3" json:"messageId,omitempty"`
	// / [GetProjectRootRequest](#gauge.messages.GetProjectRootRequest)
	ProjectRootRequest *GetProjectRootRequest `protobuf:"bytes,3,opt,name=projectRootRequest,proto3" json:"projectRootRequest,omitempty"`
	// / [GetProjectRootResponse](#gauge.messages.GetProjectRootResponse)
	ProjectRootResponse *GetProjectRootResponse `protobuf:"bytes,4,opt,name=projectRootResponse,proto3" json:"projectRootResponse,omitempty"`
	// / [GetInstallationRootRequest](#gauge.messages.GetInstallationRootRequest)
	InstallationRootRequest *GetInstallationRootRequest `protobuf:"bytes,5,opt,name=installationRootRequest,proto3" json:"installationRootRequest,omitempty"`
	// / [GetInstallationRootResponse](#gauge.messages.GetInstallationRootResponse)
	InstallationRootResponse *GetInstallationRootResponse `protobuf:"bytes,6,opt,name=installationRootResponse,proto3" json:"installationRootResponse,omitempty"`
	// / [GetAllStepsRequest](#gauge.messages.GetAllStepsRequest)
	AllStepsRequest *GetAllStepsRequest `protobuf:"bytes,7,opt,name=allStepsRequest,proto3" json:"allStepsRequest,omitempty"`
	// / [GetAllStepsResponse](#gauge.messages.GetAllStepsResponse)
	AllStepsResponse *GetAllStepsResponse `protobuf:"bytes,8,opt,name=allStepsResponse,proto3" json:"allStepsResponse,omitempty"`
	// / [GetAllSpecsRequest](#gauge.messages.GetAllSpecsRequest)
	SpecsRequest *SpecsRequest `protobuf:"bytes,9,opt,name=specsRequest,proto3" json:"specsRequest,omitempty"`
	// / [GetAllSpecsResponse](#gauge.messages.GetAllSpecsResponse)
	SpecsResponse *SpecsResponse `protobuf:"bytes,10,opt,name=specsResponse,proto3" json:"specsResponse,omitempty"`
	// / [GetStepValueRequest](#gauge.messages.GetStepValueRequest)
	StepValueRequest *GetStepValueRequest `protobuf:"bytes,11,opt,name=stepValueRequest,proto3" json:"stepValueRequest,omitempty"`
	// / [GetStepValueResponse](#gauge.messages.GetStepValueResponse)
	StepValueResponse *GetStepValueResponse `protobuf:"bytes,12,opt,name=stepValueResponse,proto3" json:"stepValueResponse,omitempty"`
	// / [GetLanguagePluginLibPathRequest](#gauge.messages.GetLanguagePluginLibPathRequest)
	LibPathRequest *GetLanguagePluginLibPathRequest `protobuf:"bytes,13,opt,name=libPathRequest,proto3" json:"libPathRequest,omitempty"`
	// / [GetLanguagePluginLibPathResponse](#gauge.messages.GetLanguagePluginLibPathResponse)
	LibPathResponse *GetLanguagePluginLibPathResponse `protobuf:"bytes,14,opt,name=libPathResponse,proto3" json:"libPathResponse,omitempty"`
	// / [ErrorResponse](#gauge.messages.ErrorResponse)
	Error *ErrorResponse `protobuf:"bytes,15,opt,name=error,proto3" json:"error,omitempty"`
	// / [GetAllConceptsRequest](#gauge.messages.GetAllConceptsRequest)
	AllConceptsRequest *GetAllConceptsRequest `protobuf:"bytes,16,opt,name=allConceptsRequest,proto3" json:"allConceptsRequest,omitempty"`
	// / [GetAllConceptsResponse](#gauge.messages.GetAllConceptsResponse)
	AllConceptsResponse *GetAllConceptsResponse `protobuf:"bytes,17,opt,name=allConceptsResponse,proto3" json:"allConceptsResponse,omitempty"`
	// / [PerformRefactoringRequest](#gauge.messages.PerformRefactoringRequest)
	PerformRefactoringRequest *PerformRefactoringRequest `protobuf:"bytes,18,opt,name=performRefactoringRequest,proto3" json:"performRefactoringRequest,omitempty"`
	// / [PerformRefactoringResponse](#gauge.messages.PerformRefactoringResponse)
	PerformRefactoringResponse *PerformRefactoringResponse `protobuf:"bytes,19,opt,name=performRefactoringResponse,proto3" json:"performRefactoringResponse,omitempty"`
	// / [ExtractConceptRequest](#gauge.messages.ExtractConceptRequest)
	ExtractConceptRequest *ExtractConceptRequest `protobuf:"bytes,20,opt,name=extractConceptRequest,proto3" json:"extractConceptRequest,omitempty"`
	// / [ExtractConceptResponse](#gauge.messages.ExtractConceptResponse)
	ExtractConceptResponse *ExtractConceptResponse `protobuf:"bytes,21,opt,name=extractConceptResponse,proto3" json:"extractConceptResponse,omitempty"`
	// / [FormatSpecsRequest] (#gauge.messages.FormatSpecsRequest)
	FormatSpecsRequest *FormatSpecsRequest `protobuf:"bytes,22,opt,name=formatSpecsRequest,proto3" json:"formatSpecsRequest,omitempty"`
	// / [FormatSpecsResponse] (#gauge.messages.FormatSpecsResponse)
	FormatSpecsResponse *FormatSpecsResponse `protobuf:"bytes,23,opt,name=formatSpecsResponse,proto3" json:"formatSpecsResponse,omitempty"`
	// / [UnsupportedApiMessageResponse] (#gauge.messages.UnsupportedApiMessageResponse)
	UnsupportedApiMessageResponse *UnsupportedApiMessageResponse `protobuf:"bytes,24,opt,name=unsupportedApiMessageResponse,proto3" json:"unsupportedApiMessageResponse,omitempty"`
}

func (x *APIMessage) Reset() {
	*x = APIMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIMessage) ProtoMessage() {}

func (x *APIMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIMessage.ProtoReflect.Descriptor instead.
func (*APIMessage) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{25}
}

func (x *APIMessage) GetMessageType() APIMessage_APIMessageType {
	if x != nil {
		return x.MessageType
	}
	return APIMessage_GetProjectRootRequest
}

func (x *APIMessage) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *APIMessage) GetProjectRootRequest() *GetProjectRootRequest {
	if x != nil {
		return x.ProjectRootRequest
	}
	return nil
}

func (x *APIMessage) GetProjectRootResponse() *GetProjectRootResponse {
	if x != nil {
		return x.ProjectRootResponse
	}
	return nil
}

func (x *APIMessage) GetInstallationRootRequest() *GetInstallationRootRequest {
	if x != nil {
		return x.InstallationRootRequest
	}
	return nil
}

func (x *APIMessage) GetInstallationRootResponse() *GetInstallationRootResponse {
	if x != nil {
		return x.InstallationRootResponse
	}
	return nil
}

func (x *APIMessage) GetAllStepsRequest() *GetAllStepsRequest {
	if x != nil {
		return x.AllStepsRequest
	}
	return nil
}

func (x *APIMessage) GetAllStepsResponse() *GetAllStepsResponse {
	if x != nil {
		return x.AllStepsResponse
	}
	return nil
}

func (x *APIMessage) GetSpecsRequest() *SpecsRequest {
	if x != nil {
		return x.SpecsRequest
	}
	return nil
}

func (x *APIMessage) GetSpecsResponse() *SpecsResponse {
	if x != nil {
		return x.SpecsResponse
	}
	return nil
}

func (x *APIMessage) GetStepValueRequest() *GetStepValueRequest {
	if x != nil {
		return x.StepValueRequest
	}
	return nil
}

func (x *APIMessage) GetStepValueResponse() *GetStepValueResponse {
	if x != nil {
		return x.StepValueResponse
	}
	return nil
}

func (x *APIMessage) GetLibPathRequest() *GetLanguagePluginLibPathRequest {
	if x != nil {
		return x.LibPathRequest
	}
	return nil
}

func (x *APIMessage) GetLibPathResponse() *GetLanguagePluginLibPathResponse {
	if x != nil {
		return x.LibPathResponse
	}
	return nil
}

func (x *APIMessage) GetError() *ErrorResponse {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *APIMessage) GetAllConceptsRequest() *GetAllConceptsRequest {
	if x != nil {
		return x.AllConceptsRequest
	}
	return nil
}

func (x *APIMessage) GetAllConceptsResponse() *GetAllConceptsResponse {
	if x != nil {
		return x.AllConceptsResponse
	}
	return nil
}

func (x *APIMessage) GetPerformRefactoringRequest() *PerformRefactoringRequest {
	if x != nil {
		return x.PerformRefactoringRequest
	}
	return nil
}

func (x *APIMessage) GetPerformRefactoringResponse() *PerformRefactoringResponse {
	if x != nil {
		return x.PerformRefactoringResponse
	}
	return nil
}

func (x *APIMessage) GetExtractConceptRequest() *ExtractConceptRequest {
	if x != nil {
		return x.ExtractConceptRequest
	}
	return nil
}

func (x *APIMessage) GetExtractConceptResponse() *ExtractConceptResponse {
	if x != nil {
		return x.ExtractConceptResponse
	}
	return nil
}

func (x *APIMessage) GetFormatSpecsRequest() *FormatSpecsRequest {
	if x != nil {
		return x.FormatSpecsRequest
	}
	return nil
}

func (x *APIMessage) GetFormatSpecsResponse() *FormatSpecsResponse {
	if x != nil {
		return x.FormatSpecsResponse
	}
	return nil
}

func (x *APIMessage) GetUnsupportedApiMessageResponse() *UnsupportedApiMessageResponse {
	if x != nil {
		return x.UnsupportedApiMessageResponse
	}
	return nil
}

type SpecsResponse_SpecDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Holds a collection of Specs that are defined in the project.
	Spec *ProtoSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// / Holds a collection of parse errors present in the above spec.
	ParseErrors []*Error `protobuf:"bytes,2,rep,name=parseErrors,proto3" json:"parseErrors,omitempty"`
}

func (x *SpecsResponse_SpecDetail) Reset() {
	*x = SpecsResponse_SpecDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecsResponse_SpecDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecsResponse_SpecDetail) ProtoMessage() {}

func (x *SpecsResponse_SpecDetail) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecsResponse_SpecDetail.ProtoReflect.Descriptor instead.
func (*SpecsResponse_SpecDetail) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7, 0}
}

func (x *SpecsResponse_SpecDetail) GetSpec() *ProtoSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *SpecsResponse_SpecDetail) GetParseErrors() []*Error {
	if x != nil {
		return x.ParseErrors
	}
	return nil
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x67, 0x61, 0x75,
	0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x0a, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x3a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x1c, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53,
	0x74, 0x65, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x73, 0x22, 0x24,
	0x0a, 0x0c, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x70, 0x65, 0x63, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x74, 0x0a, 0x0a, 0x53, 0x70,
	0x65, 0x63, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x22, 0x87, 0x01, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x09,
	0x73, 0x74, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x73, 0x74, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x65,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x74, 0x65, 0x70, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x74, 0x65, 0x70, 0x54, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x61, 0x73,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x54, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x74, 0x65,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x53, 0x74, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x74,
	0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3d, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x62, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x36, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x62, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x25,
	0x0a, 0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4f, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x65, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x77, 0x53, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x53, 0x74, 0x65, 0x70, 0x22, 0x72, 0x0a, 0x1a, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x22, 0x9d, 0x02, 0x0a, 0x15, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x75, 0x67,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x65, 0x70, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x05,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61,
	0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x65,
	0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x41, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6c, 0x0a, 0x08, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x6e, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x22, 0x58, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x70, 0x0a, 0x16, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x22, 0x2a, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70,
	0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73,
	0x22, 0x49, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x55,
	0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x70, 0x69, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x15, 0x0a,
	0x0a, 0x41, 0x50, 0x49, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x41, 0x50, 0x49, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x50, 0x49,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a,
	0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x61, 0x75,
	0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a,
	0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x18, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x65,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61,
	0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x73,
	0x70, 0x65, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10,
	0x73, 0x74, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x65, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x73, 0x74, 0x65,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a,
	0x11, 0x73, 0x74, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x65,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11,
	0x73, 0x74, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x57, 0x0a, 0x0e, 0x6c, 0x69, 0x62, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x61, 0x75, 0x67,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x62, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x6c, 0x69, 0x62, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0f, 0x6c, 0x69,
	0x62, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x62, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x6c, 0x69, 0x62, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x12, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12,
	0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x19,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x19, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x1a, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x61, 0x75, 0x67,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x1a, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5b, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x15, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e,
	0x0a, 0x16, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x16, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x12, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x75,
	0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x55, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x1d, 0x75, 0x6e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x70, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x70, 0x69,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x1d, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x70, 0x69, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xef,
	0x04, 0x0a, 0x0e, 0x41, 0x50, 0x49, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10,
	0x04, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x70, 0x65,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x70, 0x65, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x07, 0x12, 0x17,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0x09, 0x12, 0x23, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x62, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x62, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x0c, 0x12,
	0x19, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x10, 0x0f, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x11,
	0x12, 0x1a, 0x0a, 0x16, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x70, 0x65, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x14, 0x12, 0x21, 0x0a,
	0x1d, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x70, 0x69, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x15,
	0x42, 0x5c, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x74, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2f,
	0x67, 0x61, 0x75, 0x67, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0xaa, 0x02, 0x0e,
	0x47, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_api_proto_goTypes = []interface{}{
	(APIMessage_APIMessageType)(0),           // 0: gauge.messages.APIMessage.APIMessageType
	(*GetProjectRootRequest)(nil),            // 1: gauge.messages.GetProjectRootRequest
	(*GetProjectRootResponse)(nil),           // 2: gauge.messages.GetProjectRootResponse
	(*GetInstallationRootRequest)(nil),       // 3: gauge.messages.GetInstallationRootRequest
	(*GetInstallationRootResponse)(nil),      // 4: gauge.messages.GetInstallationRootResponse
	(*GetAllStepsRequest)(nil),               // 5: gauge.messages.GetAllStepsRequest
	(*GetAllStepsResponse)(nil),              // 6: gauge.messages.GetAllStepsResponse
	(*SpecsRequest)(nil),                     // 7: gauge.messages.SpecsRequest
	(*SpecsResponse)(nil),                    // 8: gauge.messages.SpecsResponse
	(*GetAllConceptsRequest)(nil),            // 9: gauge.messages.GetAllConceptsRequest
	(*GetAllConceptsResponse)(nil),           // 10: gauge.messages.GetAllConceptsResponse
	(*ConceptInfo)(nil),                      // 11: gauge.messages.ConceptInfo
	(*GetStepValueRequest)(nil),              // 12: gauge.messages.GetStepValueRequest
	(*GetStepValueResponse)(nil),             // 13: gauge.messages.GetStepValueResponse
	(*GetLanguagePluginLibPathRequest)(nil),  // 14: gauge.messages.GetLanguagePluginLibPathRequest
	(*GetLanguagePluginLibPathResponse)(nil), // 15: gauge.messages.GetLanguagePluginLibPathResponse
	(*ErrorResponse)(nil),                    // 16: gauge.messages.ErrorResponse
	(*PerformRefactoringRequest)(nil),        // 17: gauge.messages.PerformRefactoringRequest
	(*PerformRefactoringResponse)(nil),       // 18: gauge.messages.PerformRefactoringResponse
	(*ExtractConceptRequest)(nil),            // 19: gauge.messages.ExtractConceptRequest
	(*TextInfo)(nil),                         // 20: gauge.messages.textInfo
	(*Step)(nil),                             // 21: gauge.messages.step
	(*ExtractConceptResponse)(nil),           // 22: gauge.messages.ExtractConceptResponse
	(*FormatSpecsRequest)(nil),               // 23: gauge.messages.FormatSpecsRequest
	(*FormatSpecsResponse)(nil),              // 24: gauge.messages.FormatSpecsResponse
	(*UnsupportedApiMessageResponse)(nil),    // 25: gauge.messages.UnsupportedApiMessageResponse
	(*APIMessage)(nil),                       // 26: gauge.messages.APIMessage
	(*SpecsResponse_SpecDetail)(nil),         // 27: gauge.messages.SpecsResponse.SpecDetail
	(*ProtoStepValue)(nil),                   // 28: gauge.messages.ProtoStepValue
	(*ProtoSpec)(nil),                        // 29: gauge.messages.ProtoSpec
	(*Error)(nil),                            // 30: gauge.messages.Error
}
var file_api_proto_depIdxs = []int32{
	28, // 0: gauge.messages.GetAllStepsResponse.allSteps:type_name -> gauge.messages.ProtoStepValue
	27, // 1: gauge.messages.SpecsResponse.details:type_name -> gauge.messages.SpecsResponse.SpecDetail
	11, // 2: gauge.messages.GetAllConceptsResponse.concepts:type_name -> gauge.messages.ConceptInfo
	28, // 3: gauge.messages.ConceptInfo.stepValue:type_name -> gauge.messages.ProtoStepValue
	28, // 4: gauge.messages.GetStepValueResponse.stepValue:type_name -> gauge.messages.ProtoStepValue
	21, // 5: gauge.messages.ExtractConceptRequest.conceptName:type_name -> gauge.messages.step
	21, // 6: gauge.messages.ExtractConceptRequest.steps:type_name -> gauge.messages.step
	20, // 7: gauge.messages.ExtractConceptRequest.selectedTextInfo:type_name -> gauge.messages.textInfo
	0,  // 8: gauge.messages.APIMessage.messageType:type_name -> gauge.messages.APIMessage.APIMessageType
	1,  // 9: gauge.messages.APIMessage.projectRootRequest:type_name -> gauge.messages.GetProjectRootRequest
	2,  // 10: gauge.messages.APIMessage.projectRootResponse:type_name -> gauge.messages.GetProjectRootResponse
	3,  // 11: gauge.messages.APIMessage.installationRootRequest:type_name -> gauge.messages.GetInstallationRootRequest
	4,  // 12: gauge.messages.APIMessage.installationRootResponse:type_name -> gauge.messages.GetInstallationRootResponse
	5,  // 13: gauge.messages.APIMessage.allStepsRequest:type_name -> gauge.messages.GetAllStepsRequest
	6,  // 14: gauge.messages.APIMessage.allStepsResponse:type_name -> gauge.messages.GetAllStepsResponse
	7,  // 15: gauge.messages.APIMessage.specsRequest:type_name -> gauge.messages.SpecsRequest
	8,  // 16: gauge.messages.APIMessage.specsResponse:type_name -> gauge.messages.SpecsResponse
	12, // 17: gauge.messages.APIMessage.stepValueRequest:type_name -> gauge.messages.GetStepValueRequest
	13, // 18: gauge.messages.APIMessage.stepValueResponse:type_name -> gauge.messages.GetStepValueResponse
	14, // 19: gauge.messages.APIMessage.libPathRequest:type_name -> gauge.messages.GetLanguagePluginLibPathRequest
	15, // 20: gauge.messages.APIMessage.libPathResponse:type_name -> gauge.messages.GetLanguagePluginLibPathResponse
	16, // 21: gauge.messages.APIMessage.error:type_name -> gauge.messages.ErrorResponse
	9,  // 22: gauge.messages.APIMessage.allConceptsRequest:type_name -> gauge.messages.GetAllConceptsRequest
	10, // 23: gauge.messages.APIMessage.allConceptsResponse:type_name -> gauge.messages.GetAllConceptsResponse
	17, // 24: gauge.messages.APIMessage.performRefactoringRequest:type_name -> gauge.messages.PerformRefactoringRequest
	18, // 25: gauge.messages.APIMessage.performRefactoringResponse:type_name -> gauge.messages.PerformRefactoringResponse
	19, // 26: gauge.messages.APIMessage.extractConceptRequest:type_name -> gauge.messages.ExtractConceptRequest
	22, // 27: gauge.messages.APIMessage.extractConceptResponse:type_name -> gauge.messages.ExtractConceptResponse
	23, // 28: gauge.messages.APIMessage.formatSpecsRequest:type_name -> gauge.messages.FormatSpecsRequest
	24, // 29: gauge.messages.APIMessage.formatSpecsResponse:type_name -> gauge.messages.FormatSpecsResponse
	25, // 30: gauge.messages.APIMessage.unsupportedApiMessageResponse:type_name -> gauge.messages.UnsupportedApiMessageResponse
	29, // 31: gauge.messages.SpecsResponse.SpecDetail.spec:type_name -> gauge.messages.ProtoSpec
	30, // 32: gauge.messages.SpecsResponse.SpecDetail.parseErrors:type_name -> gauge.messages.Error
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	file_spec_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstallationRootRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstallationRootResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllStepsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllStepsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllConceptsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllConceptsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStepValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStepValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLanguagePluginLibPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLanguagePluginLibPathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformRefactoringRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformRefactoringResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractConceptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtractConceptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatSpecsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatSpecsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsupportedApiMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecsResponse_SpecDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		EnumInfos:         file_api_proto_enumTypes,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}
