//----------------------------------------------------------------
//  Copyright (c) ThoughtWorks, Inc.
//  Licensed under the Apache License, Version 2.0
//  See LICENSE in the project root for license information.
//----------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: lsp.proto

package gauge_messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_lsp_proto protoreflect.FileDescriptor

var file_lsp_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6c, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x67, 0x61, 0x75,
	0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x0e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x9c, 0x07, 0x0a, 0x0a,
	0x6c, 0x73, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x67, 0x61, 0x75,
	0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74,
	0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x88, 0x02, 0x01, 0x12, 0x49, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x20, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12,
	0x64, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x65, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x61, 0x75, 0x67,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x64, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x15, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2e, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x5d, 0x0a, 0x0d, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x75, 0x62, 0x12, 0x2d, 0x2e, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74,
	0x75, 0x62, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x61,
	0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x69, 0x66, 0x66, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x5e, 0x0a, 0x0c, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x23, 0x2e, 0x67, 0x61, 0x75,
	0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x53, 0x74, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x52, 0x0a, 0x08, 0x52, 0x65,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x55,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x74, 0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e,
	0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x53, 0x74, 0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x64, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x15, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x35, 0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6c, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x4d, 0x0a, 0x0b, 0x4b,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x2e, 0x67, 0x61, 0x75,
	0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4b, 0x69, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x03, 0x88, 0x02, 0x01, 0x42, 0x5c, 0x0a, 0x16, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x65, 0x74, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2f, 0x67, 0x61, 0x75, 0x67, 0x65, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x61, 0x75, 0x67, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0xaa, 0x02, 0x0e, 0x47, 0x61, 0x75, 0x67, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_lsp_proto_goTypes = []interface{}{
	(*StepNamesRequest)(nil),                      // 0: gauge.messages.StepNamesRequest
	(*CacheFileRequest)(nil),                      // 1: gauge.messages.CacheFileRequest
	(*StepPositionsRequest)(nil),                  // 2: gauge.messages.StepPositionsRequest
	(*Empty)(nil),                                 // 3: gauge.messages.Empty
	(*StubImplementationCodeRequest)(nil),         // 4: gauge.messages.StubImplementationCodeRequest
	(*StepValidateRequest)(nil),                   // 5: gauge.messages.StepValidateRequest
	(*RefactorRequest)(nil),                       // 6: gauge.messages.RefactorRequest
	(*StepNameRequest)(nil),                       // 7: gauge.messages.StepNameRequest
	(*KillProcessRequest)(nil),                    // 8: gauge.messages.KillProcessRequest
	(*StepNamesResponse)(nil),                     // 9: gauge.messages.StepNamesResponse
	(*StepPositionsResponse)(nil),                 // 10: gauge.messages.StepPositionsResponse
	(*ImplementationFileListResponse)(nil),        // 11: gauge.messages.ImplementationFileListResponse
	(*FileDiff)(nil),                              // 12: gauge.messages.FileDiff
	(*StepValidateResponse)(nil),                  // 13: gauge.messages.StepValidateResponse
	(*RefactorResponse)(nil),                      // 14: gauge.messages.RefactorResponse
	(*StepNameResponse)(nil),                      // 15: gauge.messages.StepNameResponse
	(*ImplementationFileGlobPatternResponse)(nil), // 16: gauge.messages.ImplementationFileGlobPatternResponse
}
var file_lsp_proto_depIdxs = []int32{
	0,  // 0: gauge.messages.lspService.GetStepNames:input_type -> gauge.messages.StepNamesRequest
	1,  // 1: gauge.messages.lspService.CacheFile:input_type -> gauge.messages.CacheFileRequest
	2,  // 2: gauge.messages.lspService.GetStepPositions:input_type -> gauge.messages.StepPositionsRequest
	3,  // 3: gauge.messages.lspService.GetImplementationFiles:input_type -> gauge.messages.Empty
	4,  // 4: gauge.messages.lspService.ImplementStub:input_type -> gauge.messages.StubImplementationCodeRequest
	5,  // 5: gauge.messages.lspService.ValidateStep:input_type -> gauge.messages.StepValidateRequest
	6,  // 6: gauge.messages.lspService.Refactor:input_type -> gauge.messages.RefactorRequest
	7,  // 7: gauge.messages.lspService.GetStepName:input_type -> gauge.messages.StepNameRequest
	3,  // 8: gauge.messages.lspService.GetGlobPatterns:input_type -> gauge.messages.Empty
	8,  // 9: gauge.messages.lspService.KillProcess:input_type -> gauge.messages.KillProcessRequest
	9,  // 10: gauge.messages.lspService.GetStepNames:output_type -> gauge.messages.StepNamesResponse
	3,  // 11: gauge.messages.lspService.CacheFile:output_type -> gauge.messages.Empty
	10, // 12: gauge.messages.lspService.GetStepPositions:output_type -> gauge.messages.StepPositionsResponse
	11, // 13: gauge.messages.lspService.GetImplementationFiles:output_type -> gauge.messages.ImplementationFileListResponse
	12, // 14: gauge.messages.lspService.ImplementStub:output_type -> gauge.messages.FileDiff
	13, // 15: gauge.messages.lspService.ValidateStep:output_type -> gauge.messages.StepValidateResponse
	14, // 16: gauge.messages.lspService.Refactor:output_type -> gauge.messages.RefactorResponse
	15, // 17: gauge.messages.lspService.GetStepName:output_type -> gauge.messages.StepNameResponse
	16, // 18: gauge.messages.lspService.GetGlobPatterns:output_type -> gauge.messages.ImplementationFileGlobPatternResponse
	3,  // 19: gauge.messages.lspService.KillProcess:output_type -> gauge.messages.Empty
	10, // [10:20] is the sub-list for method output_type
	0,  // [0:10] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_lsp_proto_init() }
func file_lsp_proto_init() {
	if File_lsp_proto != nil {
		return
	}
	file_messages_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lsp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lsp_proto_goTypes,
		DependencyIndexes: file_lsp_proto_depIdxs,
	}.Build()
	File_lsp_proto = out.File
	file_lsp_proto_rawDesc = nil
	file_lsp_proto_goTypes = nil
	file_lsp_proto_depIdxs = nil
}
